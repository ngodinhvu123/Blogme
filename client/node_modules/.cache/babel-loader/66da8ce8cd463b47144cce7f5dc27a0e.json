{"ast":null,"code":"require('./ImageUploadPlaceholder.js');\n\nrequire('./style.js');\n\nconst imageIdManger = require('./imageIdManger');\n\nconst constant = require('./constant');\n\nclass ImageUpload {\n  constructor(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.range = null;\n    if (typeof this.options.upload !== \"function\") console.warn('[Missing config] upload function that returns a promise is required');\n    var toolbar = this.quill.getModule(\"toolbar\");\n    toolbar.addHandler(\"image\", this.selectLocalImage.bind(this));\n  }\n\n  selectLocalImage() {\n    this.range = this.quill.getSelection();\n    this.fileHolder = document.createElement(\"input\");\n    this.fileHolder.setAttribute(\"type\", \"file\");\n    this.fileHolder.setAttribute('accept', 'image/*');\n    this.fileHolder.onchange = this.fileChanged.bind(this);\n    this.fileHolder.click();\n  }\n\n  fileChanged() {\n    const file = this.fileHolder.files[0];\n    const imageId = imageIdManger.generate();\n    const fileReader = new FileReader();\n    fileReader.addEventListener(\"load\", () => {\n      let base64ImageSrc = fileReader.result;\n      this.insertBase64Image(base64ImageSrc, imageId);\n    }, false);\n\n    if (file) {\n      fileReader.readAsDataURL(file);\n    }\n\n    this.options.upload(file).then(imageUrl => {\n      this.insertToEditor(imageUrl, imageId);\n    }, error => {\n      console.warn(error.message);\n    });\n  }\n\n  insertBase64Image(url, imageId) {\n    const range = this.range;\n    this.quill.insertEmbed(range.index, \"imageUpload\", `${imageId}${constant.ID_SPLIT_FLAG}${url}`);\n  }\n\n  insertToEditor(url, imageId) {\n    const imageElement = document.getElementById(imageId);\n\n    if (imageElement) {\n      imageElement.setAttribute('src', url);\n      imageElement.removeAttribute('id');\n      imageElement.classList.remove(constant.IMAGE_UPLOAD_PLACEHOLDER_CLASS_NAME);\n    }\n  }\n\n}\n\nmodule.exports = ImageUpload;","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/quill-plugin-image-upload/src/index.js"],"names":["require","imageIdManger","constant","ImageUpload","constructor","quill","options","range","upload","console","warn","toolbar","getModule","addHandler","selectLocalImage","bind","getSelection","fileHolder","document","createElement","setAttribute","onchange","fileChanged","click","file","files","imageId","generate","fileReader","FileReader","addEventListener","base64ImageSrc","result","insertBase64Image","readAsDataURL","then","imageUrl","insertToEditor","error","message","url","insertEmbed","index","ID_SPLIT_FLAG","imageElement","getElementById","removeAttribute","classList","remove","IMAGE_UPLOAD_PLACEHOLDER_CLASS_NAME","module","exports"],"mappings":"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","sourcesContent":["require('./ImageUploadPlaceholder.js');\nrequire('./style.js');\nconst imageIdManger = require('./imageIdManger');\nconst constant = require('./constant');\n\nclass ImageUpload {\n  constructor(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.range = null;\n\n    if (typeof (this.options.upload) !== \"function\")\n      console.warn('[Missing config] upload function that returns a promise is required');\n\n    var toolbar = this.quill.getModule(\"toolbar\");\n    toolbar.addHandler(\"image\", this.selectLocalImage.bind(this));\n  }\n\n  selectLocalImage() {\n    this.range = this.quill.getSelection();\n    this.fileHolder = document.createElement(\"input\");\n    this.fileHolder.setAttribute(\"type\", \"file\");\n    this.fileHolder.setAttribute('accept', 'image/*');\n    this.fileHolder.onchange = this.fileChanged.bind(this);\n    this.fileHolder.click();\n  }\n\n  fileChanged() {\n    const file = this.fileHolder.files[0];\n    const imageId = imageIdManger.generate();\n\n    const fileReader = new FileReader();\n    fileReader.addEventListener(\"load\", () => {\n      let base64ImageSrc = fileReader.result;\n      this.insertBase64Image(base64ImageSrc, imageId);\n    }, false);\n    if (file) {\n      fileReader.readAsDataURL(file);\n    }\n\n    this.options.upload(file)\n      .then((imageUrl) => {\n          this.insertToEditor(imageUrl, imageId);\n        },\n        (error) => {\n          console.warn(error.message);\n        }\n      )\n  }\n\n  insertBase64Image(url, imageId) {\n    const range = this.range;\n    this.quill.insertEmbed(range.index, \"imageUpload\", `${imageId}${constant.ID_SPLIT_FLAG}${url}`);\n  }\n\n  insertToEditor(url, imageId) {\n    const imageElement = document.getElementById(imageId);\n    if (imageElement) {\n      imageElement.setAttribute('src', url);\n      imageElement.removeAttribute('id');\n      imageElement.classList.remove(constant.IMAGE_UPLOAD_PLACEHOLDER_CLASS_NAME);\n    }\n  }\n}\n\nmodule.exports = ImageUpload;\n"]},"metadata":{},"sourceType":"script"}