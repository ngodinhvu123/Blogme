{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tai_lieu_hoc_vu\\\\blog_me\\\\client\\\\src\\\\Compoment\\\\Post\\\\TextAre.jsx\";\nimport React, { Component, PropTypes } from 'react';\nimport RichTextEditor from 'react-rte';\n\nclass TextAre extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: RichTextEditor.createEmptyValue()\n    };\n\n    this.onChange = value => {\n      this.setState({\n        value\n      });\n\n      if (this.props.onChange) {\n        // Send the changes up to the parent component as an HTML string.\n        // This is here to demonstrate using `.toString()` but in a real app it\n        // would be better to avoid generating a string on each change.\n        this.props.onChange(value.toString('html'));\n      }\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(RichTextEditor, {\n      value: this.state.value,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nTextAre.propTypes = {\n  onChange: PropTypes.func.isRequired()\n};\nexport default TextAre;","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/src/Compoment/Post/TextAre.jsx"],"names":["React","Component","PropTypes","RichTextEditor","TextAre","state","value","createEmptyValue","onChange","setState","props","toString","render","console","log","propTypes","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,WAA3B;;AACA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAI5BI,KAJ4B,GAIpB;AACJC,MAAAA,KAAK,EAAEH,cAAc,CAACI,gBAAf;AADH,KAJoB;;AAAA,SAO5BC,QAP4B,GAOhBF,KAAD,IAAW;AAClB,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;;AACA,UAAI,KAAKI,KAAL,CAAWF,QAAf,EAAyB;AACrB;AACA;AACA;AACA,aAAKE,KAAL,CAAWF,QAAX,CACIF,KAAK,CAACK,QAAN,CAAe,MAAf,CADJ;AAGH;AACJ,KAjB2B;AAAA;;AAkB5BC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAjB;AACA,wBACI,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAE,KAAKA,KAAL,CAAWC,KAAlC;AACI,MAAA,QAAQ,EAAE,KAAKE,QADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAIH;;AAxB2B;;AAA1BJ,O,CACKW,S,GAAY;AACfP,EAAAA,QAAQ,EAAEN,SAAS,CAACc,IAAV,CAAeC,UAAf;AADK,C;AA0BvB,eAAeb,OAAf","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport RichTextEditor from 'react-rte';\r\nclass TextAre extends Component {\r\n    static propTypes = {\r\n        onChange: PropTypes.func.isRequired()\r\n    };\r\n    state = {\r\n        value: RichTextEditor.createEmptyValue()\r\n    }\r\n    onChange = (value) => {\r\n        this.setState({ value });\r\n        if (this.props.onChange) {\r\n            // Send the changes up to the parent component as an HTML string.\r\n            // This is here to demonstrate using `.toString()` but in a real app it\r\n            // would be better to avoid generating a string on each change.\r\n            this.props.onChange(\r\n                value.toString('html')\r\n            );\r\n        }\r\n    };\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <RichTextEditor value={this.state.value}\r\n                onChange={this.onChange} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAre;"]},"metadata":{},"sourceType":"module"}