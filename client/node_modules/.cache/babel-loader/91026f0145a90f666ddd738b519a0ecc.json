{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledFieldView from '@ckeditor/ckeditor5-ui/src/labeledfield/labeledfieldview';\nimport { createLabeledInputText } from '@ckeditor/ckeditor5-ui/src/labeledfield/utils';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../../theme/textalternativeform.css';\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class TextAlternativeFormView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const t = this.locale.t;\n    /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * An input with a label.\n     *\n     * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView} #labeledInput\n     */\n\n    this.labeledInput = this._createLabeledInputView();\n    /**\n     * A button used to submit the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n     */\n\n    this.saveButtonView = this._createButton(t('Save'), checkIcon, 'ck-button-save');\n    this.saveButtonView.type = 'submit';\n    /**\n     * A button used to cancel the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n     */\n\n    this.cancelButtonView = this._createButton(t('Cancel'), cancelIcon, 'ck-button-cancel', 'cancel');\n    /**\n     * A collection of views which can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    });\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-text-alternative-form'],\n        // https://github.com/ckeditor/ckeditor5-image/issues/40\n        tabindex: '-1'\n      },\n      children: [this.labeledInput, this.saveButtonView, this.cancelButtonView]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.keystrokes.listenTo(this.element);\n    submitHandler({\n      view: this\n    });\n    [this.labeledInput, this.saveButtonView, this.cancelButtonView].forEach(v => {\n      // Register the view as focusable.\n      this._focusables.add(v); // Register the view in the focus tracker.\n\n\n      this.focusTracker.add(v.element);\n    });\n  }\n  /**\n   * Creates the button view.\n   *\n   * @private\n   * @param {String} label The button label\n   * @param {String} icon The button's icon.\n   * @param {String} className The additional button CSS class name.\n   * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n\n\n  _createButton(label, icon, className, eventName) {\n    const button = new ButtonView(this.locale);\n    button.set({\n      label,\n      icon,\n      tooltip: true\n    });\n    button.extendTemplate({\n      attributes: {\n        class: className\n      }\n    });\n\n    if (eventName) {\n      button.delegate('execute').to(this, eventName);\n    }\n\n    return button;\n  }\n  /**\n   * Creates an input with a label.\n   *\n   * @private\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled field view instance.\n   */\n\n\n  _createLabeledInputView() {\n    const t = this.locale.t;\n    const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n    labeledInput.label = t('Text alternative');\n    labeledInput.fieldView.placeholder = t('Text alternative');\n    return labeledInput;\n  }\n\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/ui/textalternativeformview.js"],"names":["View","ViewCollection","ButtonView","LabeledFieldView","createLabeledInputText","submitHandler","KeystrokeHandler","FocusTracker","FocusCycler","checkIcon","cancelIcon","TextAlternativeFormView","constructor","locale","t","focusTracker","keystrokes","labeledInput","_createLabeledInputView","saveButtonView","_createButton","type","cancelButtonView","_focusables","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","setTemplate","tag","attributes","class","tabindex","children","render","listenTo","element","view","forEach","v","add","label","icon","className","eventName","button","set","tooltip","extendTemplate","delegate","to","fieldView","placeholder"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\n\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\n\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n\nimport LabeledFieldView from '@ckeditor/ckeditor5-ui/src/labeledfield/labeledfieldview';\nimport { createLabeledInputText } from '@ckeditor/ckeditor5-ui/src/labeledfield/utils';\n\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\n\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../../theme/textalternativeform.css';\n\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\nexport default class TextAlternativeFormView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst t = this.locale.t;\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * An input with a label.\n\t\t *\n\t\t * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView} #labeledInput\n\t\t */\n\t\tthis.labeledInput = this._createLabeledInputView();\n\n\t\t/**\n\t\t * A button used to submit the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n\t\t */\n\t\tthis.saveButtonView = this._createButton( t( 'Save' ), checkIcon, 'ck-button-save' );\n\t\tthis.saveButtonView.type = 'submit';\n\n\t\t/**\n\t\t * A button used to cancel the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n\t\t */\n\t\tthis.cancelButtonView = this._createButton( t( 'Cancel' ), cancelIcon, 'ck-button-cancel', 'cancel' );\n\n\t\t/**\n\t\t * A collection of views which can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-text-alternative-form'\n\t\t\t\t],\n\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-image/issues/40\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tthis.labeledInput,\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tsubmitHandler( { view: this } );\n\n\t\t[ this.labeledInput, this.saveButtonView, this.cancelButtonView ]\n\t\t\t.forEach( v => {\n\t\t\t\t// Register the view as focusable.\n\t\t\t\tthis._focusables.add( v );\n\n\t\t\t\t// Register the view in the focus tracker.\n\t\t\t\tthis.focusTracker.add( v.element );\n\t\t\t} );\n\t}\n\n\t/**\n\t * Creates the button view.\n\t *\n\t * @private\n\t * @param {String} label The button label\n\t * @param {String} icon The button's icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n\t_createButton( label, icon, className, eventName ) {\n\t\tconst button = new ButtonView( this.locale );\n\n\t\tbutton.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\tbutton.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: className\n\t\t\t}\n\t\t} );\n\n\t\tif ( eventName ) {\n\t\t\tbutton.delegate( 'execute' ).to( this, eventName );\n\t\t}\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * Creates an input with a label.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled field view instance.\n\t */\n\t_createLabeledInputView() {\n\t\tconst t = this.locale.t;\n\t\tconst labeledInput = new LabeledFieldView( this.locale, createLabeledInputText );\n\n\t\tlabeledInput.label = t( 'Text alternative' );\n\t\tlabeledInput.fieldView.placeholder = t( 'Text alternative' );\n\n\t\treturn labeledInput;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}