{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\n\nexport default class HtmlDataProcessor {\n  /**\n   * Creates a new instance of the HTML data processor class.\n   *\n   * @param {module:engine/view/document~Document} document The view document instance.\n   */\n  constructor(document) {\n    /**\n     * A DOM parser instance used to parse an HTML string to an HTML document.\n     *\n     * @private\n     * @member {DOMParser}\n     */\n    this._domParser = new DOMParser();\n    /**\n     * A DOM converter used to convert DOM elements to view elements.\n     *\n     * @private\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n\n    this._domConverter = new DomConverter(document, {\n      blockFillerMode: 'nbsp'\n    });\n    /**\n     * A basic HTML writer instance used to convert DOM elements to an HTML string.\n     *\n     * @private\n     * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n     */\n\n    this._htmlWriter = new BasicHtmlWriter();\n  }\n  /**\n   * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n   * to data format &mdash; in this case to an HTML string.\n   *\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n   * @returns {String} HTML string.\n   */\n\n\n  toData(viewFragment) {\n    // Convert view DocumentFragment to DOM DocumentFragment.\n    const domFragment = this._domConverter.viewToDom(viewFragment, document); // Convert DOM DocumentFragment to HTML output.\n\n\n    return this._htmlWriter.getHtml(domFragment);\n  }\n  /**\n   * Converts the provided HTML string to a view tree.\n   *\n   * @param {String} data An HTML string.\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n   */\n\n\n  toView(data) {\n    // Convert input HTML data to DOM DocumentFragment.\n    const domFragment = this._toDom(data); // Convert DOM DocumentFragment to view DocumentFragment.\n\n\n    return this._domConverter.domToView(domFragment);\n  }\n  /**\n   * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n   * the provided data.\n   *\n   * @private\n   * @param {String} data\n   * @returns {DocumentFragment}\n   */\n\n\n  _toDom(data) {\n    const document = this._domParser.parseFromString(data, 'text/html');\n\n    const fragment = document.createDocumentFragment();\n    const nodes = document.body.childNodes;\n\n    while (nodes.length > 0) {\n      fragment.appendChild(nodes[0]);\n    }\n\n    return fragment;\n  }\n\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"],"names":["BasicHtmlWriter","DomConverter","HtmlDataProcessor","constructor","document","_domParser","DOMParser","_domConverter","blockFillerMode","_htmlWriter","toData","viewFragment","domFragment","viewToDom","getHtml","toView","data","_toDom","domToView","parseFromString","fragment","createDocumentFragment","nodes","body","childNodes","length","appendChild"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;AAEA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;;;;;;;AAMA,eAAe,MAAMC,iBAAN,CAAwB;AACtC;;;;;AAKAC,EAAAA,WAAW,CAAEC,QAAF,EAAa;AACvB;;;;;;AAMA,SAAKC,UAAL,GAAkB,IAAIC,SAAJ,EAAlB;AAEA;;;;;;;AAMA,SAAKC,aAAL,GAAqB,IAAIN,YAAJ,CAAkBG,QAAlB,EAA4B;AAAEI,MAAAA,eAAe,EAAE;AAAnB,KAA5B,CAArB;AAEA;;;;;;;AAMA,SAAKC,WAAL,GAAmB,IAAIT,eAAJ,EAAnB;AACA;AAED;;;;;;;;;AAOAU,EAAAA,MAAM,CAAEC,YAAF,EAAiB;AACtB;AACA,UAAMC,WAAW,GAAG,KAAKL,aAAL,CAAmBM,SAAnB,CAA8BF,YAA9B,EAA4CP,QAA5C,CAApB,CAFsB,CAItB;;;AACA,WAAO,KAAKK,WAAL,CAAiBK,OAAjB,CAA0BF,WAA1B,CAAP;AACA;AAED;;;;;;;;AAMAG,EAAAA,MAAM,CAAEC,IAAF,EAAS;AACd;AACA,UAAMJ,WAAW,GAAG,KAAKK,MAAL,CAAaD,IAAb,CAApB,CAFc,CAId;;;AACA,WAAO,KAAKT,aAAL,CAAmBW,SAAnB,CAA8BN,WAA9B,CAAP;AACA;AAED;;;;;;;;;;AAQAK,EAAAA,MAAM,CAAED,IAAF,EAAS;AACd,UAAMZ,QAAQ,GAAG,KAAKC,UAAL,CAAgBc,eAAhB,CAAiCH,IAAjC,EAAuC,WAAvC,CAAjB;;AACA,UAAMI,QAAQ,GAAGhB,QAAQ,CAACiB,sBAAT,EAAjB;AACA,UAAMC,KAAK,GAAGlB,QAAQ,CAACmB,IAAT,CAAcC,UAA5B;;AAEA,WAAQF,KAAK,CAACG,MAAN,GAAe,CAAvB,EAA2B;AAC1BL,MAAAA,QAAQ,CAACM,WAAT,CAAsBJ,KAAK,CAAE,CAAF,CAA3B;AACA;;AAED,WAAOF,QAAP;AACA;;AA/EqC","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t *\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( document, { blockFillerMode: 'nbsp' } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}