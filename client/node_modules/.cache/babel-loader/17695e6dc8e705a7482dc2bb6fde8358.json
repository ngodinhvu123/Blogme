{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module markdown-gfm/gfmdataprocessor\n */\nimport marked from './lib/marked/marked';\nimport toMarkdown from './lib/to-markdown/to-markdown';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport GFMRenderer from './lib/marked/renderer';\nimport converters from './lib/to-markdown/converters';\n/**\n * This data processor implementation uses GitHub Flavored Markdown as input/output data.\n *\n * See the {@glink features/markdown Markdown output} guide to learn more on how to enable it.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\n\nexport default class GFMDataProcessor {\n  /**\n   * Creates a new instance of the Markdown data processor class.\n   *\n   * @param {module:engine/view/document~Document} document\n   */\n  constructor(document) {\n    /**\n     * HTML data processor used to process HTML produced by the Markdown-to-HTML converter and the other way.\n     *\n     * @private\n     * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor}\n     */\n    this._htmlDP = new HtmlDataProcessor(document);\n  }\n  /**\n   * Converts the provided Markdown string to view tree.\n   *\n   * @param {String} data A Markdown string.\n   * @returns {module:engine/view/documentfragment~DocumentFragment} The converted view element.\n   */\n\n\n  toView(data) {\n    const html = marked.parse(data, {\n      gfm: true,\n      breaks: true,\n      tables: true,\n      xhtml: true,\n      renderer: new GFMRenderer()\n    });\n    return this._htmlDP.toView(html);\n  }\n  /**\n   * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment} to data format &mdash; in this\n   * case to a Markdown string.\n   *\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n   * @returns {String} Markdown string.\n   */\n\n\n  toData(viewFragment) {\n    const html = this._htmlDP.toData(viewFragment);\n\n    return toMarkdown(html, {\n      gfm: true,\n      converters\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-markdown-gfm/src/gfmdataprocessor.js"],"names":["marked","toMarkdown","HtmlDataProcessor","GFMRenderer","converters","GFMDataProcessor","constructor","document","_htmlDP","toView","data","html","parse","gfm","breaks","tables","xhtml","renderer","toData","viewFragment"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,iBAAP,MAA8B,gEAA9B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA;;;;;;;;AAOA,eAAe,MAAMC,gBAAN,CAAuB;AACrC;;;;;AAKAC,EAAAA,WAAW,CAAEC,QAAF,EAAa;AACvB;;;;;;AAMA,SAAKC,OAAL,GAAe,IAAIN,iBAAJ,CAAuBK,QAAvB,CAAf;AACA;AAED;;;;;;;;AAMAE,EAAAA,MAAM,CAAEC,IAAF,EAAS;AACd,UAAMC,IAAI,GAAGX,MAAM,CAACY,KAAP,CAAcF,IAAd,EAAoB;AAChCG,MAAAA,GAAG,EAAE,IAD2B;AAEhCC,MAAAA,MAAM,EAAE,IAFwB;AAGhCC,MAAAA,MAAM,EAAE,IAHwB;AAIhCC,MAAAA,KAAK,EAAE,IAJyB;AAKhCC,MAAAA,QAAQ,EAAE,IAAId,WAAJ;AALsB,KAApB,CAAb;AAQA,WAAO,KAAKK,OAAL,CAAaC,MAAb,CAAqBE,IAArB,CAAP;AACA;AAED;;;;;;;;;AAOAO,EAAAA,MAAM,CAAEC,YAAF,EAAiB;AACtB,UAAMR,IAAI,GAAG,KAAKH,OAAL,CAAaU,MAAb,CAAqBC,YAArB,CAAb;;AAEA,WAAOlB,UAAU,CAAEU,IAAF,EAAQ;AAAEE,MAAAA,GAAG,EAAE,IAAP;AAAaT,MAAAA;AAAb,KAAR,CAAjB;AACA;;AA7CoC","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module markdown-gfm/gfmdataprocessor\n */\n\nimport marked from './lib/marked/marked';\nimport toMarkdown from './lib/to-markdown/to-markdown';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport GFMRenderer from './lib/marked/renderer';\nimport converters from './lib/to-markdown/converters';\n\n/**\n * This data processor implementation uses GitHub Flavored Markdown as input/output data.\n *\n * See the {@glink features/markdown Markdown output} guide to learn more on how to enable it.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class GFMDataProcessor {\n\t/**\n\t * Creates a new instance of the Markdown data processor class.\n\t *\n\t * @param {module:engine/view/document~Document} document\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * HTML data processor used to process HTML produced by the Markdown-to-HTML converter and the other way.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor}\n\t\t */\n\t\tthis._htmlDP = new HtmlDataProcessor( document );\n\t}\n\n\t/**\n\t * Converts the provided Markdown string to view tree.\n\t *\n\t * @param {String} data A Markdown string.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} The converted view element.\n\t */\n\ttoView( data ) {\n\t\tconst html = marked.parse( data, {\n\t\t\tgfm: true,\n\t\t\tbreaks: true,\n\t\t\ttables: true,\n\t\t\txhtml: true,\n\t\t\trenderer: new GFMRenderer()\n\t\t} );\n\n\t\treturn this._htmlDP.toView( html );\n\t}\n\n\t/**\n\t * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment} to data format &mdash; in this\n\t * case to a Markdown string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} Markdown string.\n\t */\n\ttoData( viewFragment ) {\n\t\tconst html = this._htmlDP.toData( viewFragment );\n\n\t\treturn toMarkdown( html, { gfm: true, converters } );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}