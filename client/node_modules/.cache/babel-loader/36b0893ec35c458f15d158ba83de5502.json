{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<image>` elements.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageTextAlternativeCommand extends Command {\n  /**\n   * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n   *\n   * @readonly\n   * @observable\n   * @member {String|Boolean} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const element = this.editor.model.document.selection.getSelectedElement();\n    this.isEnabled = isImage(element);\n\n    if (isImage(element) && element.hasAttribute('alt')) {\n      this.value = element.getAttribute('alt');\n    } else {\n      this.value = false;\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options\n   * @param {String} options.newValue The new value of the `alt` attribute to set.\n   */\n\n\n  execute(options) {\n    const model = this.editor.model;\n    const imageElement = model.document.selection.getSelectedElement();\n    model.change(writer => {\n      writer.setAttribute('alt', options.newValue, imageElement);\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativecommand.js"],"names":["Command","isImage","ImageTextAlternativeCommand","refresh","element","editor","model","document","selection","getSelectedElement","isEnabled","hasAttribute","value","getAttribute","execute","options","imageElement","change","writer","setAttribute","newValue"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,OAAP,MAAoB,sCAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA;;;;;;AAKA,eAAe,MAAMC,2BAAN,SAA0CF,OAA1C,CAAkD;AAChE;;;;;;;;AAQA;;;AAGAG,EAAAA,OAAO,GAAG;AACT,UAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,QAAlB,CAA2BC,SAA3B,CAAqCC,kBAArC,EAAhB;AAEA,SAAKC,SAAL,GAAiBT,OAAO,CAAEG,OAAF,CAAxB;;AAEA,QAAKH,OAAO,CAAEG,OAAF,CAAP,IAAsBA,OAAO,CAACO,YAAR,CAAsB,KAAtB,CAA3B,EAA2D;AAC1D,WAAKC,KAAL,GAAaR,OAAO,CAACS,YAAR,CAAsB,KAAtB,CAAb;AACA,KAFD,MAEO;AACN,WAAKD,KAAL,GAAa,KAAb;AACA;AACD;AAED;;;;;;;;;AAOAE,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMT,KAAK,GAAG,KAAKD,MAAL,CAAYC,KAA1B;AACA,UAAMU,YAAY,GAAGV,KAAK,CAACC,QAAN,CAAeC,SAAf,CAAyBC,kBAAzB,EAArB;AAEAH,IAAAA,KAAK,CAACW,MAAN,CAAcC,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACC,YAAP,CAAqB,KAArB,EAA4BJ,OAAO,CAACK,QAApC,EAA8CJ,YAA9C;AACA,KAFD;AAGA;;AAtC+D","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<image>` elements.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageTextAlternativeCommand extends Command {\n\t/**\n\t * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {String|Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( isImage( element ) && element.hasAttribute( 'alt' ) ) {\n\t\t\tthis.value = element.getAttribute( 'alt' );\n\t\t} else {\n\t\t\tthis.value = false;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {String} options.newValue The new value of the `alt` attribute to set.\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setAttribute( 'alt', options.newValue, imageElement );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}