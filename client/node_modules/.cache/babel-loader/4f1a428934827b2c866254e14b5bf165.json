{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/inputcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport ChangeBuffer from './utils/changebuffer';\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\n\nexport default class InputCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {Number} undoStepSize The maximum number of atomic changes\n   * which can be contained in one batch in the command buffer.\n   */\n  constructor(editor, undoStepSize) {\n    super(editor);\n    /**\n     * Typing's change buffer used to group subsequent changes into batches.\n     *\n     * @readonly\n     * @private\n     * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n     */\n\n    this._buffer = new ChangeBuffer(editor.model, undoStepSize);\n    /**\n     * Stores batches created by the input command. The batches are used to differentiate input batches from other batches using\n     * {@link module:typing/input~Input#isInput} method.\n     *\n     * @type {WeakSet<module:engine/model/batch~Batch>}\n     * @protected\n     */\n\n    this._batches = new WeakSet();\n  }\n  /**\n   * The current change buffer.\n   *\n   * @type {module:typing/utils/changebuffer~ChangeBuffer}\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    this._buffer.destroy();\n  }\n  /**\n   * Executes the input command. It replaces the content within the given range with the given text.\n   * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n   * at the beginning of the range (which after the removal is a collapsed range).\n   *\n   * @fires execute\n   * @param {Object} [options] The command options.\n   * @param {String} [options.text=''] The text to be inserted.\n   * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n   * to the first range in the current selection.\n   * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n   * should be placed after the insertion. If not specified, the selection will be placed right after\n   * the inserted text.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const text = options.text || '';\n    const textInsertions = text.length;\n    const selection = options.range ? model.createSelection(options.range) : doc.selection;\n    const resultRange = options.resultRange;\n    model.enqueueChange(this._buffer.batch, writer => {\n      this._buffer.lock();\n\n      model.deleteContent(selection);\n\n      if (text) {\n        model.insertContent(writer.createText(text, doc.selection.getAttributes()), selection);\n      }\n\n      if (resultRange) {\n        writer.setSelection(resultRange);\n      } else if (!selection.is('documentSelection')) {\n        writer.setSelection(selection);\n      }\n\n      this._buffer.unlock();\n\n      this._buffer.input(textInsertions); // Store the batch as an 'input' batch for the Input.isInput( batch ) check.\n\n\n      this._batches.add(this._buffer.batch);\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-typing/src/inputcommand.js"],"names":["Command","ChangeBuffer","InputCommand","constructor","editor","undoStepSize","_buffer","model","_batches","WeakSet","buffer","destroy","execute","options","doc","document","text","textInsertions","length","selection","range","createSelection","resultRange","enqueueChange","batch","writer","lock","deleteContent","insertContent","createText","getAttributes","setSelection","is","unlock","input","add"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,OAAP,MAAoB,sCAApB;AAEA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;;;;;;AAKA,eAAe,MAAMC,YAAN,SAA2BF,OAA3B,CAAmC;AACjD;;;;;;;AAOAG,EAAAA,WAAW,CAAEC,MAAF,EAAUC,YAAV,EAAyB;AACnC,UAAOD,MAAP;AAEA;;;;;;;;AAOA,SAAKE,OAAL,GAAe,IAAIL,YAAJ,CAAkBG,MAAM,CAACG,KAAzB,EAAgCF,YAAhC,CAAf;AAEA;;;;;;;;AAOA,SAAKG,QAAL,GAAgB,IAAIC,OAAJ,EAAhB;AACA;AAED;;;;;;;AAKA,MAAIC,MAAJ,GAAa;AACZ,WAAO,KAAKJ,OAAZ;AACA;AAED;;;;;AAGAK,EAAAA,OAAO,GAAG;AACT,UAAMA,OAAN;;AAEA,SAAKL,OAAL,CAAaK,OAAb;AACA;AAED;;;;;;;;;;;;;;;;AAcAC,EAAAA,OAAO,CAAEC,OAAO,GAAG,EAAZ,EAAiB;AACvB,UAAMN,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAA1B;AACA,UAAMO,GAAG,GAAGP,KAAK,CAACQ,QAAlB;AACA,UAAMC,IAAI,GAAGH,OAAO,CAACG,IAAR,IAAgB,EAA7B;AACA,UAAMC,cAAc,GAAGD,IAAI,CAACE,MAA5B;AACA,UAAMC,SAAS,GAAGN,OAAO,CAACO,KAAR,GAAgBb,KAAK,CAACc,eAAN,CAAuBR,OAAO,CAACO,KAA/B,CAAhB,GAAyDN,GAAG,CAACK,SAA/E;AACA,UAAMG,WAAW,GAAGT,OAAO,CAACS,WAA5B;AAEAf,IAAAA,KAAK,CAACgB,aAAN,CAAqB,KAAKjB,OAAL,CAAakB,KAAlC,EAAyCC,MAAM,IAAI;AAClD,WAAKnB,OAAL,CAAaoB,IAAb;;AAEAnB,MAAAA,KAAK,CAACoB,aAAN,CAAqBR,SAArB;;AAEA,UAAKH,IAAL,EAAY;AACXT,QAAAA,KAAK,CAACqB,aAAN,CAAqBH,MAAM,CAACI,UAAP,CAAmBb,IAAnB,EAAyBF,GAAG,CAACK,SAAJ,CAAcW,aAAd,EAAzB,CAArB,EAA+EX,SAA/E;AACA;;AAED,UAAKG,WAAL,EAAmB;AAClBG,QAAAA,MAAM,CAACM,YAAP,CAAqBT,WAArB;AACA,OAFD,MAEO,IAAK,CAACH,SAAS,CAACa,EAAV,CAAc,mBAAd,CAAN,EAA4C;AAClDP,QAAAA,MAAM,CAACM,YAAP,CAAqBZ,SAArB;AACA;;AAED,WAAKb,OAAL,CAAa2B,MAAb;;AAEA,WAAK3B,OAAL,CAAa4B,KAAb,CAAoBjB,cAApB,EAjBkD,CAmBlD;;;AACA,WAAKT,QAAL,CAAc2B,GAAd,CAAmB,KAAK7B,OAAL,CAAakB,KAAhC;AACA,KArBD;AAsBA;;AA5FgD","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/inputcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\nexport default class InputCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Number} undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */\n\tconstructor( editor, undoStepSize ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Typing's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\n\n\t\t/**\n\t\t * Stores batches created by the input command. The batches are used to differentiate input batches from other batches using\n\t\t * {@link module:typing/input~Input#isInput} method.\n\t\t *\n\t\t * @type {WeakSet<module:engine/model/batch~Batch>}\n\t\t * @protected\n\t\t */\n\t\tthis._batches = new WeakSet();\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._buffer.destroy();\n\t}\n\n\t/**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {String} [options.text=''] The text to be inserted.\n\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n\t * to the first range in the current selection.\n\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n\t * should be placed after the insertion. If not specified, the selection will be placed right after\n\t * the inserted text.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst text = options.text || '';\n\t\tconst textInsertions = text.length;\n\t\tconst selection = options.range ? model.createSelection( options.range ) : doc.selection;\n\t\tconst resultRange = options.resultRange;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\tmodel.deleteContent( selection );\n\n\t\t\tif ( text ) {\n\t\t\t\tmodel.insertContent( writer.createText( text, doc.selection.getAttributes() ), selection );\n\t\t\t}\n\n\t\t\tif ( resultRange ) {\n\t\t\t\twriter.setSelection( resultRange );\n\t\t\t} else if ( !selection.is( 'documentSelection' ) ) {\n\t\t\t\twriter.setSelection( selection );\n\t\t\t}\n\n\t\t\tthis._buffer.unlock();\n\n\t\t\tthis._buffer.input( textInsertions );\n\n\t\t\t// Store the batch as an 'input' batch for the Input.isInput( batch ) check.\n\t\t\tthis._batches.add( this._buffer.batch );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}