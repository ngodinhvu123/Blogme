{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler({\n  emitter,\n  activator,\n  callback,\n  contextElements\n}) {\n  emitter.listenTo(document, 'mousedown', (evt, {\n    target\n  }) => {\n    if (!activator()) {\n      return;\n    }\n\n    for (const contextElement of contextElements) {\n      if (contextElement.contains(target)) {\n        return;\n      }\n    }\n\n    callback();\n  });\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js"],"names":["clickOutsideHandler","emitter","activator","callback","contextElements","listenTo","document","evt","target","contextElement","contains"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;AAeA,eAAe,SAASA,mBAAT,CAA8B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA,QAAtB;AAAgCC,EAAAA;AAAhC,CAA9B,EAAkF;AAChGH,EAAAA,OAAO,CAACI,QAAR,CAAkBC,QAAlB,EAA4B,WAA5B,EAAyC,CAAEC,GAAF,EAAO;AAAEC,IAAAA;AAAF,GAAP,KAAuB;AAC/D,QAAK,CAACN,SAAS,EAAf,EAAoB;AACnB;AACA;;AAED,SAAM,MAAMO,cAAZ,IAA8BL,eAA9B,EAAgD;AAC/C,UAAKK,cAAc,CAACC,QAAf,CAAyBF,MAAzB,CAAL,EAAyC;AACxC;AACA;AACD;;AAEDL,IAAAA,QAAQ;AACR,GAZD;AAaA","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\n\temitter.listenTo( document, 'mousedown', ( evt, { target } ) => {\n\t\tif ( !activator() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const contextElement of contextElements ) {\n\t\t\tif ( contextElement.contains( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tcallback();\n\t} );\n}\n"]},"metadata":{},"sourceType":"module"}