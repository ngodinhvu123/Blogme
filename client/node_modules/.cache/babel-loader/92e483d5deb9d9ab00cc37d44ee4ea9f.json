{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widget\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport WidgetTypeAround from './widgettypearound/widgettypearound';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils';\nimport { isArrowKeyCode, isForwardArrowKeyCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport '../theme/widget.css';\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Widget extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Widget';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [WidgetTypeAround];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const view = this.editor.editing.view;\n    const viewDocument = view.document;\n    /**\n     * Holds previously selected widgets.\n     *\n     * @private\n     * @type {Set.<module:engine/view/element~Element>}\n     */\n\n    this._previouslySelected = new Set(); // Model to view selection converter.\n    // Converts selection placed over widget element to fake selection\n\n    this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi) => {\n      // Remove selected class from previously selected widgets.\n      this._clearPreviouslySelectedWidgets(conversionApi.writer);\n\n      const viewWriter = conversionApi.writer;\n      const viewSelection = viewWriter.document.selection;\n      const selectedElement = viewSelection.getSelectedElement();\n      let lastMarked = null;\n\n      for (const range of viewSelection.getRanges()) {\n        for (const value of range) {\n          const node = value.item; // Do not mark nested widgets in selected one. See: #57.\n\n          if (isWidget(node) && !isChild(node, lastMarked)) {\n            viewWriter.addClass(WIDGET_SELECTED_CLASS_NAME, node);\n\n            this._previouslySelected.add(node);\n\n            lastMarked = node; // Check if widget is a single element selected.\n\n            if (node == selectedElement) {\n              viewWriter.setSelection(viewSelection.getRanges(), {\n                fake: true,\n                label: getLabel(selectedElement)\n              });\n            }\n          }\n        }\n      }\n    }, {\n      priority: 'low'\n    }); // If mouse down is pressed on widget - create selection over whole widget.\n\n    view.addObserver(MouseObserver);\n    this.listenTo(viewDocument, 'mousedown', (...args) => this._onMousedown(...args)); // There are two keydown listeners working on different priorities. This allows other\n    // features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n    // and customize the behavior even further in different content/selection scenarios.\n    //\n    // * The first listener handles changing the selection on arrow key press\n    // if the widget is selected or if the selection is next to a widget and the widget\n    // should become selected upon the arrow key press.\n    //\n    // * The second (late) listener makes sure the default browser action on arrow key press is\n    // prevented when a widget is selected. This prevents the selection from being moved\n    // from a fake selection container.\n\n    this.listenTo(viewDocument, 'keydown', (...args) => {\n      this._handleSelectionChangeOnArrowKeyPress(...args);\n    }, {\n      priority: 'high'\n    });\n    this.listenTo(viewDocument, 'keydown', (...args) => {\n      this._preventDefaultOnArrowKeyPress(...args);\n    }, {\n      priority: priorities.get('high') - 20\n    }); // Handle custom delete behaviour.\n\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      if (this._handleDelete(data.direction == 'forward')) {\n        data.preventDefault();\n        evt.stop();\n      }\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} eventInfo\n   * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n   */\n\n\n  _onMousedown(eventInfo, domEventData) {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    let element = domEventData.target; // Do nothing for single or double click inside nested editable.\n\n    if (isInsideNestedEditable(element)) {\n      // But at least triple click inside nested editable causes broken selection in Safari.\n      // For such event, we select the entire nested editable element.\n      // See: https://github.com/ckeditor/ckeditor5/issues/1463.\n      if (env.isSafari && domEventData.domEvent.detail >= 3) {\n        const mapper = editor.editing.mapper;\n        const modelElement = mapper.toModelElement(element);\n        this.editor.model.change(writer => {\n          domEventData.preventDefault();\n          writer.setSelection(modelElement, 'in');\n        });\n      }\n\n      return;\n    } // If target is not a widget element - check if one of the ancestors is.\n\n\n    if (!isWidget(element)) {\n      element = element.findAncestor(isWidget);\n\n      if (!element) {\n        return;\n      }\n    }\n\n    domEventData.preventDefault(); // Focus editor if is not focused already.\n\n    if (!viewDocument.isFocused) {\n      view.focus();\n    } // Create model selection over widget.\n\n\n    const modelElement = editor.editing.mapper.toModelElement(element);\n\n    this._setSelectionOverElement(modelElement);\n  }\n  /**\n   * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes\n   * the model selection when:\n   *\n   * * arrow key is pressed when the widget is selected,\n   * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n   *\n   * See {@link #_preventDefaultOnArrowKeyPress}.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} eventInfo\n   * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n   */\n\n\n  _handleSelectionChangeOnArrowKeyPress(eventInfo, domEventData) {\n    const keyCode = domEventData.keyCode; // Checks if the keys were handled and then prevents the default event behaviour and stops\n    // the propagation.\n\n    if (!isArrowKeyCode(keyCode)) {\n      return;\n    }\n\n    const model = this.editor.model;\n    const schema = model.schema;\n    const modelSelection = model.document.selection;\n    const objectElement = modelSelection.getSelectedElement();\n    const isForward = isForwardArrowKeyCode(keyCode, this.editor.locale.contentLanguageDirection); // If object element is selected.\n\n    if (objectElement && schema.isObject(objectElement)) {\n      const position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n      const newRange = schema.getNearestSelectionRange(position, isForward ? 'forward' : 'backward');\n\n      if (newRange) {\n        model.change(writer => {\n          writer.setSelection(newRange);\n        });\n        domEventData.preventDefault();\n        eventInfo.stop();\n      }\n\n      return;\n    } // If selection is next to object element.\n    // Return if not collapsed.\n\n\n    if (!modelSelection.isCollapsed) {\n      return;\n    }\n\n    const objectElementNextToSelection = this._getObjectElementNextToSelection(isForward);\n\n    if (objectElementNextToSelection && schema.isObject(objectElementNextToSelection)) {\n      this._setSelectionOverElement(objectElementNextToSelection);\n\n      domEventData.preventDefault();\n      eventInfo.stop();\n    }\n  }\n  /**\n   * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents\n   * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n   * container.\n   *\n   * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} eventInfo\n   * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n   */\n\n\n  _preventDefaultOnArrowKeyPress(eventInfo, domEventData) {\n    const keyCode = domEventData.keyCode; // Checks if the keys were handled and then prevents the default event behaviour and stops\n    // the propagation.\n\n    if (!isArrowKeyCode(keyCode)) {\n      return;\n    }\n\n    const model = this.editor.model;\n    const schema = model.schema;\n    const objectElement = model.document.selection.getSelectedElement(); // If object element is selected.\n\n    if (objectElement && schema.isObject(objectElement)) {\n      domEventData.preventDefault();\n      eventInfo.stop();\n    }\n  }\n  /**\n   * Handles delete keys: backspace and delete.\n   *\n   * @private\n   * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n   * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n   */\n\n\n  _handleDelete(isForward) {\n    // Do nothing when the read only mode is enabled.\n    if (this.editor.isReadOnly) {\n      return;\n    }\n\n    const modelDocument = this.editor.model.document;\n    const modelSelection = modelDocument.selection; // Do nothing on non-collapsed selection.\n\n    if (!modelSelection.isCollapsed) {\n      return;\n    }\n\n    const objectElement = this._getObjectElementNextToSelection(isForward);\n\n    if (objectElement) {\n      this.editor.model.change(writer => {\n        let previousNode = modelSelection.anchor.parent; // Remove previous element if empty.\n\n        while (previousNode.isEmpty) {\n          const nodeToRemove = previousNode;\n          previousNode = nodeToRemove.parent;\n          writer.remove(nodeToRemove);\n        }\n\n        this._setSelectionOverElement(objectElement);\n      });\n      return true;\n    }\n  }\n  /**\n   * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n   *\n   * @protected\n   * @param {module:engine/model/element~Element} element\n   */\n\n\n  _setSelectionOverElement(element) {\n    this.editor.model.change(writer => {\n      writer.setSelection(writer.createRangeOn(element));\n    });\n  }\n  /**\n   * Checks if {@link module:engine/model/element~Element element} placed next to the current\n   * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n   * {@link module:engine/model/schema~Schema schema} as `object`.\n   *\n   * @protected\n   * @param {Boolean} forward Direction of checking.\n   * @returns {module:engine/model/element~Element|null}\n   */\n\n\n  _getObjectElementNextToSelection(forward) {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const modelSelection = model.document.selection; // Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n    // to its current state after undo.\n\n    const probe = model.createSelection(modelSelection);\n    model.modifySelection(probe, {\n      direction: forward ? 'forward' : 'backward'\n    });\n    const objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n    if (!!objectElement && schema.isObject(objectElement)) {\n      return objectElement;\n    }\n\n    return null;\n  }\n  /**\n   * Removes CSS class from previously selected widgets.\n   *\n   * @private\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n\n\n  _clearPreviouslySelectedWidgets(writer) {\n    for (const widget of this._previouslySelected) {\n      writer.removeClass(WIDGET_SELECTED_CLASS_NAME, widget);\n    }\n\n    this._previouslySelected.clear();\n  }\n\n} // Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\n\nfunction isInsideNestedEditable(element) {\n  while (element) {\n    if (element.is('editableElement') && !element.is('rootElement')) {\n      return true;\n    } // Click on nested widget should select it.\n\n\n    if (isWidget(element)) {\n      return false;\n    }\n\n    element = element.parent;\n  }\n\n  return false;\n} // Checks whether the specified `element` is a child of the `parent` element.\n//\n// @param {module:engine/view/element~Element} element An element to check.\n// @param {module:engine/view/element~Element|null} parent A parent for the element.\n// @returns {Boolean}\n\n\nfunction isChild(element, parent) {\n  if (!parent) {\n    return false;\n  }\n\n  return Array.from(element.getAncestors()).includes(parent);\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-widget/src/widget.js"],"names":["Plugin","MouseObserver","WidgetTypeAround","getLabel","isWidget","WIDGET_SELECTED_CLASS_NAME","isArrowKeyCode","isForwardArrowKeyCode","env","priorities","Widget","pluginName","requires","init","view","editor","editing","viewDocument","document","_previouslySelected","Set","downcastDispatcher","on","evt","data","conversionApi","_clearPreviouslySelectedWidgets","writer","viewWriter","viewSelection","selection","selectedElement","getSelectedElement","lastMarked","range","getRanges","value","node","item","isChild","addClass","add","setSelection","fake","label","priority","addObserver","listenTo","args","_onMousedown","_handleSelectionChangeOnArrowKeyPress","_preventDefaultOnArrowKeyPress","get","_handleDelete","direction","preventDefault","stop","eventInfo","domEventData","element","target","isInsideNestedEditable","isSafari","domEvent","detail","mapper","modelElement","toModelElement","model","change","findAncestor","isFocused","focus","_setSelectionOverElement","keyCode","schema","modelSelection","objectElement","isForward","locale","contentLanguageDirection","isObject","position","getLastPosition","getFirstPosition","newRange","getNearestSelectionRange","isCollapsed","objectElementNextToSelection","_getObjectElementNextToSelection","isReadOnly","modelDocument","previousNode","anchor","parent","isEmpty","nodeToRemove","remove","createRangeOn","forward","probe","createSelection","modifySelection","nodeBefore","nodeAfter","widget","removeClass","clear","is","Array","from","getAncestors","includes"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widget\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport WidgetTypeAround from './widgettypearound/widgettypearound';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils';\nimport {\n\tisArrowKeyCode,\n\tisForwardArrowKeyCode\n} from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport '../theme/widget.css';\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Widget extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Widget';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ WidgetTypeAround ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Holds previously selected widgets.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<module:engine/view/element~Element>}\n\t\t */\n\t\tthis._previouslySelected = new Set();\n\n\t\t// Model to view selection converter.\n\t\t// Converts selection placed over widget element to fake selection\n\t\tthis.editor.editing.downcastDispatcher.on( 'selection', ( evt, data, conversionApi ) => {\n\t\t\t// Remove selected class from previously selected widgets.\n\t\t\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\n\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst viewSelection = viewWriter.document.selection;\n\t\t\tconst selectedElement = viewSelection.getSelectedElement();\n\t\t\tlet lastMarked = null;\n\n\t\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tconst node = value.item;\n\n\t\t\t\t\t// Do not mark nested widgets in selected one. See: #57.\n\t\t\t\t\tif ( isWidget( node ) && !isChild( node, lastMarked ) ) {\n\t\t\t\t\t\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\n\n\t\t\t\t\t\tthis._previouslySelected.add( node );\n\t\t\t\t\t\tlastMarked = node;\n\n\t\t\t\t\t\t// Check if widget is a single element selected.\n\t\t\t\t\t\tif ( node == selectedElement ) {\n\t\t\t\t\t\t\tviewWriter.setSelection( viewSelection.getRanges(), { fake: true, label: getLabel( selectedElement ) } );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// If mouse down is pressed on widget - create selection over whole widget.\n\t\tview.addObserver( MouseObserver );\n\t\tthis.listenTo( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\n\n\t\t// There are two keydown listeners working on different priorities. This allows other\n\t\t// features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n\t\t// and customize the behavior even further in different content/selection scenarios.\n\t\t//\n\t\t// * The first listener handles changing the selection on arrow key press\n\t\t// if the widget is selected or if the selection is next to a widget and the widget\n\t\t// should become selected upon the arrow key press.\n\t\t//\n\t\t// * The second (late) listener makes sure the default browser action on arrow key press is\n\t\t// prevented when a widget is selected. This prevents the selection from being moved\n\t\t// from a fake selection container.\n\t\tthis.listenTo( viewDocument, 'keydown', ( ...args ) => {\n\t\t\tthis._handleSelectionChangeOnArrowKeyPress( ...args );\n\t\t}, { priority: 'high' } );\n\n\t\tthis.listenTo( viewDocument, 'keydown', ( ...args ) => {\n\t\t\tthis._preventDefaultOnArrowKeyPress( ...args );\n\t\t}, { priority: priorities.get( 'high' ) - 20 } );\n\n\t\t// Handle custom delete behaviour.\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( this._handleDelete( data.direction == 'forward' ) ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onMousedown( eventInfo, domEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet element = domEventData.target;\n\n\t\t// Do nothing for single or double click inside nested editable.\n\t\tif ( isInsideNestedEditable( element ) ) {\n\t\t\t// But at least triple click inside nested editable causes broken selection in Safari.\n\t\t\t// For such event, we select the entire nested editable element.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/1463.\n\t\t\tif ( env.isSafari && domEventData.domEvent.detail >= 3 ) {\n\t\t\t\tconst mapper = editor.editing.mapper;\n\t\t\t\tconst modelElement = mapper.toModelElement( element );\n\n\t\t\t\tthis.editor.model.change( writer => {\n\t\t\t\t\tdomEventData.preventDefault();\n\t\t\t\t\twriter.setSelection( modelElement, 'in' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If target is not a widget element - check if one of the ancestors is.\n\t\tif ( !isWidget( element ) ) {\n\t\t\telement = element.findAncestor( isWidget );\n\n\t\t\tif ( !element ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\n\t\t// Focus editor if is not focused already.\n\t\tif ( !viewDocument.isFocused ) {\n\t\t\tview.focus();\n\t\t}\n\n\t\t// Create model selection over widget.\n\t\tconst modelElement = editor.editing.mapper.toModelElement( element );\n\n\t\tthis._setSelectionOverElement( modelElement );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes\n\t * the model selection when:\n\t *\n\t * * arrow key is pressed when the widget is selected,\n\t * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n\t *\n\t * See {@link #_preventDefaultOnArrowKeyPress}.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_handleSelectionChangeOnArrowKeyPress( eventInfo, domEventData ) {\n\t\tconst keyCode = domEventData.keyCode;\n\n\t\t// Checks if the keys were handled and then prevents the default event behaviour and stops\n\t\t// the propagation.\n\t\tif ( !isArrowKeyCode( keyCode ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\t\tconst isForward = isForwardArrowKeyCode( keyCode, this.editor.locale.contentLanguageDirection );\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n\t\t\tconst newRange = schema.getNearestSelectionRange( position, isForward ? 'forward' : 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\teventInfo.stop();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If selection is next to object element.\n\t\t// Return if not collapsed.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElementNextToSelection = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElementNextToSelection && schema.isObject( objectElementNextToSelection ) ) {\n\t\t\tthis._setSelectionOverElement( objectElementNextToSelection );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents\n\t * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n\t * container.\n\t *\n\t * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_preventDefaultOnArrowKeyPress( eventInfo, domEventData ) {\n\t\tconst keyCode = domEventData.keyCode;\n\n\t\t// Checks if the keys were handled and then prevents the default event behaviour and stops\n\t\t// the propagation.\n\t\tif ( !isArrowKeyCode( keyCode ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst objectElement = model.document.selection.getSelectedElement();\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleDelete( isForward ) {\n\t\t// Do nothing when the read only mode is enabled.\n\t\tif ( this.editor.isReadOnly ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelDocument = this.editor.model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\n\t\t// Do nothing on non-collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tlet previousNode = modelSelection.anchor.parent;\n\n\t\t\t\t// Remove previous element if empty.\n\t\t\t\twhile ( previousNode.isEmpty ) {\n\t\t\t\t\tconst nodeToRemove = previousNode;\n\t\t\t\t\tpreviousNode = nodeToRemove.parent;\n\n\t\t\t\t\twriter.remove( nodeToRemove );\n\t\t\t\t}\n\n\t\t\t\tthis._setSelectionOverElement( objectElement );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @protected\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_setSelectionOverElement( element ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeOn( element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @protected\n\t * @param {Boolean} forward Direction of checking.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getObjectElementNextToSelection( forward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n\t\t// to its current state after undo.\n\t\tconst probe = model.createSelection( modelSelection );\n\t\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\n\t\tconst objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n\t\tif ( !!objectElement && schema.isObject( objectElement ) ) {\n\t\t\treturn objectElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes CSS class from previously selected widgets.\n\t *\n\t * @private\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_clearPreviouslySelectedWidgets( writer ) {\n\t\tfor ( const widget of this._previouslySelected ) {\n\t\t\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\n\t\t}\n\n\t\tthis._previouslySelected.clear();\n\t}\n}\n\n// Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\nfunction isInsideNestedEditable( element ) {\n\twhile ( element ) {\n\t\tif ( element.is( 'editableElement' ) && !element.is( 'rootElement' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Click on nested widget should select it.\n\t\tif ( isWidget( element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\treturn false;\n}\n\n// Checks whether the specified `element` is a child of the `parent` element.\n//\n// @param {module:engine/view/element~Element} element An element to check.\n// @param {module:engine/view/element~Element|null} parent A parent for the element.\n// @returns {Boolean}\nfunction isChild( element, parent ) {\n\tif ( !parent ) {\n\t\treturn false;\n\t}\n\n\treturn Array.from( element.getAncestors() ).includes( parent );\n}\n"]},"metadata":{},"sourceType":"module"}