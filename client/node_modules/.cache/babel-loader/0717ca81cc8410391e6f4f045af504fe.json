{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditor\n */\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport ClassicEditorUI from './classiceditorui';\nimport ClassicEditorUIView from './classiceditoruiview';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The {@glink builds/guides/overview#classic-editor classic editor} implementation.\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n *\n * # Classic editor and classic build\n *\n * The classic editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\n * but it is also available in the {@glink builds/guides/overview#classic-editor classic build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\n\nexport default class ClassicEditor extends Editor {\n  /**\n   * Creates an instance of the classic editor.\n   *\n   * **Note:** do not use the constructor to create editor instances. Use the static\n   * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n   *\n   * @protected\n   * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n   * or the editor's initial data. For more information see\n   * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n   * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n   */\n  constructor(sourceElementOrData, config) {\n    super(config);\n\n    if (isElement(sourceElementOrData)) {\n      this.sourceElement = sourceElementOrData;\n    }\n\n    this.data.processor = new HtmlDataProcessor(this.data.viewDocument);\n    this.model.document.createRoot();\n    const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n    const view = new ClassicEditorUIView(this.locale, this.editing.view, {\n      shouldToolbarGroupWhenFull\n    });\n    this.ui = new ClassicEditorUI(this, view);\n    attachToForm(this);\n  }\n  /**\n   * Destroys the editor instance, releasing all resources used by it.\n   *\n   * Updates the editor's source element with the data.\n   *\n   * @returns {Promise}\n   */\n\n\n  destroy() {\n    if (this.sourceElement) {\n      this.updateSourceElement();\n    }\n\n    this.ui.destroy();\n    return super.destroy();\n  }\n  /**\n   * Creates a new classic editor instance.\n   *\n   * There are three ways how the editor can be initialized.\n   *\n   * # Replacing a DOM element (and loading data from it)\n   *\n   * You can initialize the editor using an existing DOM element:\n   *\n   *\t\tClassicEditor\n   *\t\t\t.create( document.querySelector( '#editor' ) )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n   *\n   * # Creating a detached editor\n   *\n   * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n   * In this case, the editor will render an element that must be inserted into the DOM:\n   *\n   *\t\tClassicEditor\n   *\t\t\t.create( '<p>Hello world!</p>' )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\n   *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.element );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n   * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n   *\n   * # Replacing a DOM element (and data provided in `config.initialData`)\n   *\n   * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n   *\n   *\t\tClassicEditor\n   *\t\t\t.create( document.querySelector( '#editor' ), {\n   *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n   *\t\t\t} )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n   * makes it difficult to set the content of the source element.\n   *\n   * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n   *\n   * # Configuring the editor\n   *\n   * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n   * customizing plugins, toolbar and more.\n   *\n   * # Using the editor from source\n   *\n   * The code samples listed in the previous sections of this documentation assume that you are using an\n   * {@glink builds/guides/overview editor build} (for example â€“ `@ckeditor/ckeditor5-build-classic`).\n   *\n   * If you want to use the classic editor from source (`@ckeditor/ckeditor5-editor-classic/src/classiceditor`),\n   * you need to define the list of\n   * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n   * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n   * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n   *\n   * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n   * or the editor's initial data.\n   *\n   * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n   * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n   * in the DOM (the original one will be hidden and the editor will be injected next to it).\n   *\n   * Moreover, the editor data will be set back to the original element once the editor is destroyed and when a form, in which\n   * this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration with native\n   * web forms.\n   *\n   * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n   * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n   *\n   * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n   * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n   */\n\n\n  static create(sourceElementOrData, config = {}) {\n    return new Promise(resolve => {\n      const editor = new this(sourceElementOrData, config);\n      resolve(editor.initPlugins().then(() => editor.ui.init(isElement(sourceElementOrData) ? sourceElementOrData : null)).then(() => {\n        if (!isElement(sourceElementOrData) && config.initialData) {\n          // Documented in core/editor/editorconfig.jdoc.\n          throw new CKEditorError('editor-create-initial-data: ' + 'The config.initialData option cannot be used together with initial data passed in Editor.create().', null);\n        }\n\n        const initialData = config.initialData || getInitialData(sourceElementOrData);\n        return editor.data.init(initialData);\n      }).then(() => editor.fire('ready')).then(() => editor));\n    });\n  }\n\n}\nmix(ClassicEditor, DataApiMixin);\nmix(ClassicEditor, ElementApiMixin);\n\nfunction getInitialData(sourceElementOrData) {\n  return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditor.js"],"names":["Editor","DataApiMixin","ElementApiMixin","attachToForm","HtmlDataProcessor","ClassicEditorUI","ClassicEditorUIView","getDataFromElement","mix","isElement","CKEditorError","ClassicEditor","constructor","sourceElementOrData","config","sourceElement","data","processor","viewDocument","model","document","createRoot","shouldToolbarGroupWhenFull","get","view","locale","editing","ui","destroy","updateSourceElement","create","Promise","resolve","editor","initPlugins","then","init","initialData","getInitialData","fire"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditor\n */\n\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport ClassicEditorUI from './classiceditorui';\nimport ClassicEditorUIView from './classiceditoruiview';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The {@glink builds/guides/overview#classic-editor classic editor} implementation.\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n *\n * # Classic editor and classic build\n *\n * The classic editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\n * but it is also available in the {@glink builds/guides/overview#classic-editor classic build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class ClassicEditor extends Editor {\n\t/**\n\t * Creates an instance of the classic editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data. For more information see\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( sourceElementOrData, config ) {\n\t\tsuper( config );\n\n\t\tif ( isElement( sourceElementOrData ) ) {\n\t\t\tthis.sourceElement = sourceElementOrData;\n\t\t}\n\n\t\tthis.data.processor = new HtmlDataProcessor( this.data.viewDocument );\n\n\t\tthis.model.document.createRoot();\n\n\t\tconst shouldToolbarGroupWhenFull = !this.config.get( 'toolbar.shouldNotGroupWhenFull' );\n\t\tconst view = new ClassicEditorUIView( this.locale, this.editing.view, {\n\t\t\tshouldToolbarGroupWhenFull\n\t\t} );\n\n\t\tthis.ui = new ClassicEditorUI( this, view );\n\n\t\tattachToForm( this );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the editor's source element with the data.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tif ( this.sourceElement ) {\n\t\t\tthis.updateSourceElement();\n\t\t}\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates a new classic editor instance.\n\t *\n\t * There are three ways how the editor can be initialized.\n\t *\n\t * # Replacing a DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, the editor will render an element that must be inserted into the DOM:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( '<p>Hello world!</p>' )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Replacing a DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * # Using the editor from source\n\t *\n\t * The code samples listed in the previous sections of this documentation assume that you are using an\n\t * {@glink builds/guides/overview editor build} (for example â€“ `@ckeditor/ckeditor5-build-classic`).\n\t *\n\t * If you want to use the classic editor from source (`@ckeditor/ckeditor5-editor-classic/src/classiceditor`),\n\t * you need to define the list of\n\t * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n\t * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n\t *\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n\t * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n\t * in the DOM (the original one will be hidden and the editor will be injected next to it).\n\t *\n\t * Moreover, the editor data will be set back to the original element once the editor is destroyed and when a form, in which\n\t * this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration with native\n\t * web forms.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */\n\tstatic create( sourceElementOrData, config = {} ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( sourceElementOrData, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => editor.ui.init( isElement( sourceElementOrData ) ? sourceElementOrData : null ) )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\tif ( !isElement( sourceElementOrData ) && config.initialData ) {\n\t\t\t\t\t\t\t// Documented in core/editor/editorconfig.jdoc.\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'editor-create-initial-data: ' +\n\t\t\t\t\t\t\t\t'The config.initialData option cannot be used together with initial data passed in Editor.create().',\n\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst initialData = config.initialData || getInitialData( sourceElementOrData );\n\n\t\t\t\t\t\treturn editor.data.init( initialData );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( ClassicEditor, DataApiMixin );\nmix( ClassicEditor, ElementApiMixin );\n\nfunction getInitialData( sourceElementOrData ) {\n\treturn isElement( sourceElementOrData ) ? getDataFromElement( sourceElementOrData ) : sourceElementOrData;\n}\n"]},"metadata":{},"sourceType":"module"}