{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n  constructor(nativeDataTransfer) {\n    /**\n     * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n     *\n     * @readonly\n     * @member {Array.<File>} #files\n     */\n    this.files = getFiles(nativeDataTransfer);\n    /**\n     * The native DataTransfer object.\n     *\n     * @private\n     * @member {DataTransfer} #_native\n     */\n\n    this._native = nativeDataTransfer;\n  }\n  /**\n   * Returns an array of available native content types.\n   *\n   * @returns {Array.<String>}\n   */\n\n\n  get types() {\n    return this._native.types;\n  }\n  /**\n   * Gets data from the data transfer by its mime type.\n   *\n   *\t\tdataTransfer.getData( 'text/plain' );\n   *\n   * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n   * @returns {String}\n   */\n\n\n  getData(type) {\n    return this._native.getData(type);\n  }\n  /**\n   * Sets data in the data transfer.\n   *\n   * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n   * @param {String} data\n   */\n\n\n  setData(type, data) {\n    this._native.setData(type, data);\n  }\n\n}\n\nfunction getFiles(nativeDataTransfer) {\n  // DataTransfer.files and items are Array-like and might not have an iterable interface.\n  const files = nativeDataTransfer.files ? Array.from(nativeDataTransfer.files) : [];\n  const items = nativeDataTransfer.items ? Array.from(nativeDataTransfer.items) : [];\n\n  if (files.length) {\n    return files;\n  } // Chrome have empty DataTransfer.files, but let get files through the items interface.\n\n\n  return items.filter(item => item.kind === 'file').map(item => item.getAsFile());\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-clipboard/src/datatransfer.js"],"names":["DataTransfer","constructor","nativeDataTransfer","files","getFiles","_native","types","getData","type","setData","data","Array","from","items","length","filter","item","kind","map","getAsFile"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;;;AAGA,eAAe,MAAMA,YAAN,CAAmB;AACjCC,EAAAA,WAAW,CAAEC,kBAAF,EAAuB;AACjC;;;;;;AAMA,SAAKC,KAAL,GAAaC,QAAQ,CAAEF,kBAAF,CAArB;AAEA;;;;;;;AAMA,SAAKG,OAAL,GAAeH,kBAAf;AACA;AAED;;;;;;;AAKA,MAAII,KAAJ,GAAY;AACX,WAAO,KAAKD,OAAL,CAAaC,KAApB;AACA;AAED;;;;;;;;;;AAQAC,EAAAA,OAAO,CAAEC,IAAF,EAAS;AACf,WAAO,KAAKH,OAAL,CAAaE,OAAb,CAAsBC,IAAtB,CAAP;AACA;AAED;;;;;;;;AAMAC,EAAAA,OAAO,CAAED,IAAF,EAAQE,IAAR,EAAe;AACrB,SAAKL,OAAL,CAAaI,OAAb,CAAsBD,IAAtB,EAA4BE,IAA5B;AACA;;AAhDgC;;AAmDlC,SAASN,QAAT,CAAmBF,kBAAnB,EAAwC;AACvC;AACA,QAAMC,KAAK,GAAGD,kBAAkB,CAACC,KAAnB,GAA2BQ,KAAK,CAACC,IAAN,CAAYV,kBAAkB,CAACC,KAA/B,CAA3B,GAAoE,EAAlF;AACA,QAAMU,KAAK,GAAGX,kBAAkB,CAACW,KAAnB,GAA2BF,KAAK,CAACC,IAAN,CAAYV,kBAAkB,CAACW,KAA/B,CAA3B,GAAoE,EAAlF;;AAEA,MAAKV,KAAK,CAACW,MAAX,EAAoB;AACnB,WAAOX,KAAP;AACA,GAPsC,CAQvC;;;AACA,SAAOU,KAAK,CACVE,MADK,CACGC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,MADzB,EAELC,GAFK,CAEAF,IAAI,IAAIA,IAAI,CAACG,SAAL,EAFR,CAAP;AAGA","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n\tconstructor( nativeDataTransfer ) {\n\t\t/**\n\t\t * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<File>} #files\n\t\t */\n\t\tthis.files = getFiles( nativeDataTransfer );\n\n\t\t/**\n\t\t * The native DataTransfer object.\n\t\t *\n\t\t * @private\n\t\t * @member {DataTransfer} #_native\n\t\t */\n\t\tthis._native = nativeDataTransfer;\n\t}\n\n\t/**\n\t * Returns an array of available native content types.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tget types() {\n\t\treturn this._native.types;\n\t}\n\n\t/**\n\t * Gets data from the data transfer by its mime type.\n\t *\n\t *\t\tdataTransfer.getData( 'text/plain' );\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @returns {String}\n\t */\n\tgetData( type ) {\n\t\treturn this._native.getData( type );\n\t}\n\n\t/**\n\t * Sets data in the data transfer.\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @param {String} data\n\t */\n\tsetData( type, data ) {\n\t\tthis._native.setData( type, data );\n\t}\n}\n\nfunction getFiles( nativeDataTransfer ) {\n\t// DataTransfer.files and items are Array-like and might not have an iterable interface.\n\tconst files = nativeDataTransfer.files ? Array.from( nativeDataTransfer.files ) : [];\n\tconst items = nativeDataTransfer.items ? Array.from( nativeDataTransfer.items ) : [];\n\n\tif ( files.length ) {\n\t\treturn files;\n\t}\n\t// Chrome have empty DataTransfer.files, but let get files through the items interface.\n\treturn items\n\t\t.filter( item => item.kind === 'file' )\n\t\t.map( item => item.getAsFile() );\n}\n"]},"metadata":{},"sourceType":"module"}