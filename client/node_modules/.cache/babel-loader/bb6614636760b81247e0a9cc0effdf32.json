{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/componentfactory\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\n\nexport default class ComponentFactory {\n  /**\n   * Creates an instance of the factory.\n   *\n   * @constructor\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   */\n  constructor(editor) {\n    /**\n     * The editor instance that the factory belongs to.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor}\n     */\n    this.editor = editor;\n    /**\n     * Registered component factories.\n     *\n     * @private\n     * @member {Map}\n     */\n\n    this._components = new Map();\n  }\n  /**\n   * Returns an iterator of registered component names. Names are returned in lower case.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  *names() {\n    for (const value of this._components.values()) {\n      yield value.originalName;\n    }\n  }\n  /**\n   * Registers a component factory function that will be used by the\n   * {@link #create create} method and called with the\n   * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n   * allowing localization of the {@link module:ui/view~View view}.\n   *\n   * @param {String} name The name of the component.\n   * @param {Function} callback The callback that returns the component.\n   */\n\n\n  add(name, callback) {\n    if (this.has(name)) {\n      /**\n       * The item already exists in the component factory.\n       *\n       * @error componentfactory-item-exists\n       * @param {String} name The name of the component.\n       */\n      throw new CKEditorError('componentfactory-item-exists: The item already exists in the component factory.', this, {\n        name\n      });\n    }\n\n    this._components.set(getNormalized(name), {\n      callback,\n      originalName: name\n    });\n  }\n  /**\n   * Creates an instance of a component registered in the factory under a specific name.\n   *\n   * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n   * the previously {@link #add added} factory function, allowing localization of the\n   * {@link module:ui/view~View view}.\n   *\n   * @param {String} name The name of the component.\n   * @returns {module:ui/view~View} The instantiated component view.\n   */\n\n\n  create(name) {\n    if (!this.has(name)) {\n      /**\n       * The required component is not registered in the component factory. Please make sure\n       * the provided name is correct and the component has been correctly\n       * {@link #add added} to the factory.\n       *\n       * @error componentfactory-item-missing\n       * @param {String} name The name of the missing component.\n       */\n      throw new CKEditorError('componentfactory-item-missing: The required component is not registered in the factory.', this, {\n        name\n      });\n    }\n\n    return this._components.get(getNormalized(name)).callback(this.editor.locale);\n  }\n  /**\n   * Checks if a component of a given name is registered in the factory.\n   *\n   * @param {String} name The name of the component.\n   * @returns {Boolean}\n   */\n\n\n  has(name) {\n    return this._components.has(getNormalized(name));\n  }\n\n} //\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\n\nfunction getNormalized(name) {\n  return String(name).toLowerCase();\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-ui/src/componentfactory.js"],"names":["CKEditorError","ComponentFactory","constructor","editor","_components","Map","names","value","values","originalName","add","name","callback","has","set","getNormalized","create","get","locale","String","toLowerCase"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,aAAP,MAA0B,6CAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,eAAe,MAAMC,gBAAN,CAAuB;AACrC;;;;;;AAMAC,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB;;;;;;AAMA,SAAKA,MAAL,GAAcA,MAAd;AAEA;;;;;;;AAMA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA;AAED;;;;;;;AAKA,GAAEC,KAAF,GAAU;AACT,SAAM,MAAMC,KAAZ,IAAqB,KAAKH,WAAL,CAAiBI,MAAjB,EAArB,EAAiD;AAChD,YAAMD,KAAK,CAACE,YAAZ;AACA;AACD;AAED;;;;;;;;;;;AASAC,EAAAA,GAAG,CAAEC,IAAF,EAAQC,QAAR,EAAmB;AACrB,QAAK,KAAKC,GAAL,CAAUF,IAAV,CAAL,EAAwB;AACvB;;;;;;AAMA,YAAM,IAAIX,aAAJ,CACL,iFADK,EAEL,IAFK,EAGL;AAAEW,QAAAA;AAAF,OAHK,CAAN;AAKA;;AAED,SAAKP,WAAL,CAAiBU,GAAjB,CAAsBC,aAAa,CAAEJ,IAAF,CAAnC,EAA6C;AAAEC,MAAAA,QAAF;AAAYH,MAAAA,YAAY,EAAEE;AAA1B,KAA7C;AACA;AAED;;;;;;;;;;;;AAUAK,EAAAA,MAAM,CAAEL,IAAF,EAAS;AACd,QAAK,CAAC,KAAKE,GAAL,CAAUF,IAAV,CAAN,EAAyB;AACxB;;;;;;;;AAQA,YAAM,IAAIX,aAAJ,CACL,yFADK,EAEL,IAFK,EAGL;AAAEW,QAAAA;AAAF,OAHK,CAAN;AAKA;;AAED,WAAO,KAAKP,WAAL,CAAiBa,GAAjB,CAAsBF,aAAa,CAAEJ,IAAF,CAAnC,EAA8CC,QAA9C,CAAwD,KAAKT,MAAL,CAAYe,MAApE,CAAP;AACA;AAED;;;;;;;;AAMAL,EAAAA,GAAG,CAAEF,IAAF,EAAS;AACX,WAAO,KAAKP,WAAL,CAAiBS,GAAjB,CAAsBE,aAAa,CAAEJ,IAAF,CAAnC,CAAP;AACA;;AArGoC,C,CAwGtC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,aAAT,CAAwBJ,IAAxB,EAA+B;AAC9B,SAAOQ,MAAM,CAAER,IAAF,CAAN,CAAeS,WAAf,EAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/componentfactory\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n\t/**\n\t * Creates an instance of the factory.\n\t *\n\t * @constructor\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance that the factory belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * Registered component factories.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._components = new Map();\n\t}\n\n\t/**\n\t * Returns an iterator of registered component names. Names are returned in lower case.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tfor ( const value of this._components.values() ) {\n\t\t\tyield value.originalName;\n\t\t}\n\t}\n\n\t/**\n\t * Registers a component factory function that will be used by the\n\t * {@link #create create} method and called with the\n\t * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n\t * allowing localization of the {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @param {Function} callback The callback that returns the component.\n\t */\n\tadd( name, callback ) {\n\t\tif ( this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The item already exists in the component factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-exists\n\t\t\t * @param {String} name The name of the component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-exists: The item already exists in the component factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\tthis._components.set( getNormalized( name ), { callback, originalName: name } );\n\t}\n\n\t/**\n\t * Creates an instance of a component registered in the factory under a specific name.\n\t *\n\t * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n\t * the previously {@link #add added} factory function, allowing localization of the\n\t * {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {module:ui/view~View} The instantiated component view.\n\t */\n\tcreate( name ) {\n\t\tif ( !this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The required component is not registered in the component factory. Please make sure\n\t\t\t * the provided name is correct and the component has been correctly\n\t\t\t * {@link #add added} to the factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-missing\n\t\t\t * @param {String} name The name of the missing component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-missing: The required component is not registered in the factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\treturn this._components.get( getNormalized( name ) ).callback( this.editor.locale );\n\t}\n\n\t/**\n\t * Checks if a component of a given name is registered in the factory.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\treturn this._components.has( getNormalized( name ) );\n\t}\n}\n\n//\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\nfunction getNormalized( name ) {\n\treturn String( name ).toLowerCase();\n}\n"]},"metadata":{},"sourceType":"module"}