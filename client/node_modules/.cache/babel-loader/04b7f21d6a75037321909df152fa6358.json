{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class EnterObserver extends Observer {\n  constructor(view) {\n    super(view);\n    const doc = this.document;\n    doc.on('keydown', (evt, data) => {\n      if (this.isEnabled && data.keyCode == keyCodes.enter) {\n        // Save the event object to check later if it was stopped or not.\n        let event;\n        doc.once('enter', evt => event = evt, {\n          priority: 'highest'\n        });\n        doc.fire('enter', new DomEventData(doc, data.domEvent, {\n          isSoft: data.shiftKey\n        })); // Stop `keydown` event if `enter` event was stopped.\n        // https://github.com/ckeditor/ckeditor5/issues/753\n\n        if (event && event.stop.called) {\n          evt.stop();\n        }\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe() {}\n\n}\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js"],"names":["Observer","DomEventData","keyCodes","EnterObserver","constructor","view","doc","document","on","evt","data","isEnabled","keyCode","enter","event","once","priority","fire","domEvent","isSoft","shiftKey","stop","called","observe"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,QAAP,MAAqB,uDAArB;AACA,OAAOC,YAAP,MAAyB,2DAAzB;AACA,SAASC,QAAT,QAAyB,wCAAzB;AAEA;;;;;;AAKA,eAAe,MAAMC,aAAN,SAA4BH,QAA5B,CAAqC;AACnDI,EAAAA,WAAW,CAAEC,IAAF,EAAS;AACnB,UAAOA,IAAP;AAEA,UAAMC,GAAG,GAAG,KAAKC,QAAjB;AAEAD,IAAAA,GAAG,CAACE,EAAJ,CAAQ,SAAR,EAAmB,CAAEC,GAAF,EAAOC,IAAP,KAAiB;AACnC,UAAK,KAAKC,SAAL,IAAkBD,IAAI,CAACE,OAAL,IAAgBV,QAAQ,CAACW,KAAhD,EAAwD;AACvD;AACA,YAAIC,KAAJ;AACAR,QAAAA,GAAG,CAACS,IAAJ,CAAU,OAAV,EAAmBN,GAAG,IAAMK,KAAK,GAAGL,GAApC,EAA2C;AAAEO,UAAAA,QAAQ,EAAE;AAAZ,SAA3C;AAEAV,QAAAA,GAAG,CAACW,IAAJ,CAAU,OAAV,EAAmB,IAAIhB,YAAJ,CAAkBK,GAAlB,EAAuBI,IAAI,CAACQ,QAA5B,EAAsC;AACxDC,UAAAA,MAAM,EAAET,IAAI,CAACU;AAD2C,SAAtC,CAAnB,EALuD,CASvD;AACA;;AACA,YAAKN,KAAK,IAAIA,KAAK,CAACO,IAAN,CAAWC,MAAzB,EAAkC;AACjCb,UAAAA,GAAG,CAACY,IAAJ;AACA;AACD;AACD,KAhBD;AAiBA;AAED;;;;;AAGAE,EAAAA,OAAO,GAAG,CAAE;;AA5BuC;AA+BpD","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst doc = this.document;\n\n\t\tdoc.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\n\t\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\t\tlet event;\n\t\t\t\tdoc.once( 'enter', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\t\tdoc.fire( 'enter', new DomEventData( doc, data.domEvent, {\n\t\t\t\t\tisSoft: data.shiftKey\n\t\t\t\t} ) );\n\n\t\t\t\t// Stop `keydown` event if `enter` event was stopped.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\t\tif ( event && event.stop.called ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */\n"]},"metadata":{},"sourceType":"module"}