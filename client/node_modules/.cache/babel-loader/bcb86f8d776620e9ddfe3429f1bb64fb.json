{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertText, remove } from '../conversion/downcasthelpers';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { convertSelectionChange } from '../conversion/upcasthelpers'; // @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class EditingController {\n  /**\n   * Creates an editing controller instance.\n   *\n   * @param {module:engine/model/model~Model} model Editing model.\n   * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n   */\n  constructor(model, stylesProcessor) {\n    /**\n     * Editor model.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model}\n     */\n    this.model = model;\n    /**\n     * Editing view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View}\n     */\n\n    this.view = new View(stylesProcessor);\n    /**\n     * Mapper which describes the model-view binding.\n     *\n     * @readonly\n     * @member {module:engine/conversion/mapper~Mapper}\n     */\n\n    this.mapper = new Mapper();\n    /**\n     * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n     *\n     * @readonly\n     * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n     */\n\n    this.downcastDispatcher = new DowncastDispatcher({\n      mapper: this.mapper\n    });\n    const doc = this.model.document;\n    const selection = doc.selection;\n    const markers = this.model.markers; // When plugins listen on model changes (on selection change, post fixers, etc) and change the view as a result of\n    // model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n    // is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n    //\n    // See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\n    this.listenTo(this.model, '_beforeChanges', () => {\n      this.view._disableRendering(true);\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(this.model, '_afterChanges', () => {\n      this.view._disableRendering(false);\n    }, {\n      priority: 'lowest'\n    }); // Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n    // Do it on 'low' priority, so changes are converted after other listeners did their job.\n    // Also convert model selection.\n\n    this.listenTo(doc, 'change', () => {\n      this.view.change(writer => {\n        this.downcastDispatcher.convertChanges(doc.differ, markers, writer);\n        this.downcastDispatcher.convertSelection(selection, markers, writer);\n      });\n    }, {\n      priority: 'low'\n    }); // Convert selection from the view to the model when it changes in the view.\n\n    this.listenTo(this.view.document, 'selectionChange', convertSelectionChange(this.model, this.mapper)); // Attach default model converters.\n\n    this.downcastDispatcher.on('insert:$text', insertText(), {\n      priority: 'lowest'\n    });\n    this.downcastDispatcher.on('remove', remove(), {\n      priority: 'low'\n    }); // Attach default model selection converters.\n\n    this.downcastDispatcher.on('selection', clearAttributes(), {\n      priority: 'low'\n    });\n    this.downcastDispatcher.on('selection', convertRangeSelection(), {\n      priority: 'low'\n    });\n    this.downcastDispatcher.on('selection', convertCollapsedSelection(), {\n      priority: 'low'\n    }); // Binds {@link module:engine/view/document~Document#roots view roots collection} to\n    // {@link module:engine/model/document~Document#roots model roots collection} so creating\n    // model root automatically creates corresponding view root.\n\n    this.view.document.roots.bindTo(this.model.document.roots).using(root => {\n      // $graveyard is a special root that has no reflection in the view.\n      if (root.rootName == '$graveyard') {\n        return null;\n      }\n\n      const viewRoot = new RootEditableElement(this.view.document, root.name);\n      viewRoot.rootName = root.rootName;\n      this.mapper.bindElements(root, viewRoot);\n      return viewRoot;\n    }); // @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n    // @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n    // @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n    // @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n  }\n  /**\n   * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n   * by `EditingController` that need to be destroyed.\n   */\n\n\n  destroy() {\n    this.view.destroy();\n    this.stopListening();\n  }\n\n}\nmix(EditingController, ObservableMixin);","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js"],"names":["RootEditableElement","View","Mapper","DowncastDispatcher","clearAttributes","convertCollapsedSelection","convertRangeSelection","insertText","remove","ObservableMixin","mix","convertSelectionChange","EditingController","constructor","model","stylesProcessor","view","mapper","downcastDispatcher","doc","document","selection","markers","listenTo","_disableRendering","priority","change","writer","convertChanges","differ","convertSelection","on","roots","bindTo","using","root","rootName","viewRoot","name","bindElements","destroy","stopListening"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\n\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertText, remove } from '../conversion/downcasthelpers';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController {\n\t/**\n\t * Creates an editing controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Editing model.\n\t * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n\t */\n\tconstructor( model, stylesProcessor ) {\n\t\t/**\n\t\t * Editor model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Editing view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = new View( stylesProcessor );\n\n\t\t/**\n\t\t * Mapper which describes the model-view binding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\n\t\tconst doc = this.model.document;\n\t\tconst selection = doc.selection;\n\t\tconst markers = this.model.markers;\n\n\t\t// When plugins listen on model changes (on selection change, post fixers, etc) and change the view as a result of\n\t\t// model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n\t\t// is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n\t\t//\n\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\t\tthis.listenTo( this.model, '_beforeChanges', () => {\n\t\t\tthis.view._disableRendering( true );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this.model, '_afterChanges', () => {\n\t\t\tthis.view._disableRendering( false );\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n\t\t// Do it on 'low' priority, so changes are converted after other listeners did their job.\n\t\t// Also convert model selection.\n\t\tthis.listenTo( doc, 'change', () => {\n\t\t\tthis.view.change( writer => {\n\t\t\t\tthis.downcastDispatcher.convertChanges( doc.differ, markers, writer );\n\t\t\t\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\t// Convert selection from the view to the model when it changes in the view.\n\t\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\n\n\t\t// Attach default model converters.\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\n\n\t\t// Attach default model selection converters.\n\t\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\n\n\t\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\n\t\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\n\t\t// model root automatically creates corresponding view root.\n\t\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\n\t\t\t// $graveyard is a special root that has no reflection in the view.\n\t\t\tif ( root.rootName == '$graveyard' ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewRoot = new RootEditableElement( this.view.document, root.name );\n\n\t\t\tviewRoot.rootName = root.rootName;\n\t\t\tthis.mapper.bindElements( root, viewRoot );\n\n\t\t\treturn viewRoot;\n\t\t} );\n\n\t\t// @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n\t\t// @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n\n\t\t// @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n\t\t// @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n\n\t\t// @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n\t\t// @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n\t\t// @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n\t * by `EditingController` that need to be destroyed.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t\tthis.stopListening();\n\t}\n}\n\nmix( EditingController, ObservableMixin );\n"]},"metadata":{},"sourceType":"module"}