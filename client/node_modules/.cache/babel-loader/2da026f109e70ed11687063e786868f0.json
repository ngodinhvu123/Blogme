{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/locale\n */\n\n/* globals console */\nimport { _translate } from './translation-service';\nconst RTL_LANGUAGE_CODES = ['ar', 'fa', 'he', 'ku', 'ug'];\n/**\n * Represents the localization services.\n */\n\nexport default class Locale {\n  /**\n   * Creates a new instance of the locale class. Learn more about\n   * {@glink features/ui-language configuring the language of the editor}.\n   *\n   * @param {Object} [options] Locale configuration.\n   * @param {String} [options.uiLanguage='en'] The editor UI language code in the\n   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n   * @param {String} [options.contentLanguage] The editor content language code in the\n   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n   * See {@link #contentLanguage}.\n   */\n  constructor(options = {}) {\n    /**\n     * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n     *\n     * If the {@link #contentLanguage content language} was not specified in the `Locale` constructor,\n     * it also defines the language of the content.\n     *\n     * @readonly\n     * @member {String}\n     */\n    this.uiLanguage = options.uiLanguage || 'en';\n    /**\n     * The editor content language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n     *\n     * Usually the same as the {@link #uiLanguage editor language}, it can be customized by passing an optional\n     * argument to the `Locale` constructor.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.contentLanguage = options.contentLanguage || this.uiLanguage;\n    /**\n     * Text direction of the {@link #uiLanguage editor UI language}. Either `'ltr'` or `'rtl'`.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.uiLanguageDirection = getLanguageDirection(this.uiLanguage);\n    /**\n     * Text direction of the {@link #contentLanguage editor content language}.\n     *\n     * If the content language was passed directly to the `Locale` constructor, this property represents the\n     * direction of that language.\n     *\n     * If the {@link #contentLanguage editor content language} was derived from the {@link #uiLanguage editor language},\n     * the content language direction is the same as the {@link #uiLanguageDirection UI language direction}.\n     *\n     * The value is either `'ltr'` or `'rtl'`.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.contentLanguageDirection = getLanguageDirection(this.contentLanguage);\n    /**\n     * Translates the given message to the {@link #uiLanguage}. This method is also available in\n     * {@link module:core/editor/editor~Editor#t `Editor`} and {@link module:ui/view~View#t `View`}.\n     *\n     * This method's context is statically bound to the `Locale` instance and **should always be called as a function**:\n     *\n     *\t\tconst t = locale.t;\n     *\t\tt( 'Label' );\n     *\n     * The message can be either a string or an object implementing the {@link module:utils/translation-service~Message} interface.\n     *\n     * The message may contain placeholders (`%<index>`) for value(s) that are passed as a `values` parameter.\n     * For an array of values, the `%<index>` will be changed to an element of that array at the given index.\n     * For a single value passed as the second argument, only the `%0` placeholders will be changed to the provided value.\n     *\n     *\t\tt( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n     * \t\tt( 'Created file \"%0\", fileName );\n     *\n     * The message supports plural forms. To specify the plural form, use the `plural` property. Singular or plural form\n     * will be chosen depending on the first value from the passed `values`. The value of the `plural` property is used\n     * as a default plural translation when the translation for the target language is missing.\n     *\n     *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Add a space' for the English language.\n     *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 5 ); // 'Add 5 spaces' for the English language.\n     *\t\tt( { string: '%1 a space', plural: '%1 %0 spaces' }, [ 2, 'Add' ] ); // 'Add 2 spaces' for the English language.\n     *\n     * \t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Dodaj spacjÄ™' for the Polish language.\n     *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 5 ); // 'Dodaj 5 spacji' for the Polish language.\n     *\t\tt( { string: '%1 a space', plural: '%1 %0 spaces' }, [ 2, 'Add' ] ); // 'Dodaj 2 spacje' for the Polish language.\n     *\n     *  * The message should provide an ID using the `id` property when the message strings are not unique and their\n     * translations should be different.\n     *\n     *\t\ttranslate( 'en', { string: 'image', id: 'ADD_IMAGE' } );\n     *\t\ttranslate( 'en', { string: 'image', id: 'AN_IMAGE' } );\n     *\n     * @method #t\n     * @param {String|module:utils/translation-service~Message} message A message that will be localized (translated).\n     * @param {String|Number|Array.<String|Number>} [values] A value or an array of values that will fill message placeholders.\n     * For messages supporting plural forms the first value will determine the plural form.\n     * @returns {String}\n     */\n\n    this.t = (message, values) => this._t(message, values);\n  }\n  /**\n   * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n   *\n   * **Note**: This property was deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n   * properties instead.\n   *\n   * @deprecated\n   * @member {String}\n   */\n\n\n  get language() {\n    /**\n     * The {@link module:utils/locale~Locale#language `Locale#language`} property was deprecated and will\n     * be removed in the near future. Please use the {@link #uiLanguage} and {@link #contentLanguage} properties instead.\n     *\n     * @error locale-deprecated-language-property\n     */\n    console.warn('locale-deprecated-language-property: ' + 'The Locale#language property has been deprecated and will be removed in the near future. ' + 'Please use #uiLanguage and #contentLanguage properties instead.');\n    return this.uiLanguage;\n  }\n  /**\n   * An unbound version of the {@link #t} method.\n   *\n   * @private\n   * @param {String|module:utils/translation-service~Message} message\n   * @param {Number|String|Array.<Number|String>} [values]\n   * @returns {String}\n   */\n\n\n  _t(message, values = []) {\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    if (typeof message === 'string') {\n      message = {\n        string: message\n      };\n    }\n\n    const hasPluralForm = !!message.plural;\n    const quantity = hasPluralForm ? values[0] : 1;\n\n    const translatedString = _translate(this.uiLanguage, message, quantity);\n\n    return interpolateString(translatedString, values);\n  }\n\n} // Fills the `%0, %1, ...` string placeholders with values.\n\nfunction interpolateString(string, values) {\n  return string.replace(/%(\\d+)/g, (match, index) => {\n    return index < values.length ? values[index] : match;\n  });\n} // Helps determine whether a language is LTR or RTL.\n//\n// @param {String} language The ISO 639-1 language code.\n// @returns {String} 'ltr' or 'rtl\n\n\nfunction getLanguageDirection(languageCode) {\n  return RTL_LANGUAGE_CODES.includes(languageCode) ? 'rtl' : 'ltr';\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-utils/src/locale.js"],"names":["_translate","RTL_LANGUAGE_CODES","Locale","constructor","options","uiLanguage","contentLanguage","uiLanguageDirection","getLanguageDirection","contentLanguageDirection","t","message","values","_t","language","console","warn","Array","isArray","string","hasPluralForm","plural","quantity","translatedString","interpolateString","replace","match","index","length","languageCode","includes"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;AAEA,SAASA,UAAT,QAA2B,uBAA3B;AAEA,MAAMC,kBAAkB,GAAG,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,CAA3B;AAEA;;;;AAGA,eAAe,MAAMC,MAAN,CAAa;AAC3B;;;;;;;;;;;AAWAC,EAAAA,WAAW,CAAEC,OAAO,GAAG,EAAZ,EAAiB;AAC3B;;;;;;;;;AASA,SAAKC,UAAL,GAAkBD,OAAO,CAACC,UAAR,IAAsB,IAAxC;AAEA;;;;;;;;;;AASA,SAAKC,eAAL,GAAuBF,OAAO,CAACE,eAAR,IAA2B,KAAKD,UAAvD;AAEA;;;;;;;AAMA,SAAKE,mBAAL,GAA2BC,oBAAoB,CAAE,KAAKH,UAAP,CAA/C;AAEA;;;;;;;;;;;;;;;AAcA,SAAKI,wBAAL,GAAgCD,oBAAoB,CAAE,KAAKF,eAAP,CAApD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,SAAKI,CAAL,GAAS,CAAEC,OAAF,EAAWC,MAAX,KAAuB,KAAKC,EAAL,CAASF,OAAT,EAAkBC,MAAlB,CAAhC;AACA;AAED;;;;;;;;;;;AASA,MAAIE,QAAJ,GAAe;AACd;;;;;;AAMAC,IAAAA,OAAO,CAACC,IAAR,CACC,0CACA,2FADA,GAEA,iEAHD;AAKA,WAAO,KAAKX,UAAZ;AACA;AAED;;;;;;;;;;AAQAQ,EAAAA,EAAE,CAAEF,OAAF,EAAWC,MAAM,GAAG,EAApB,EAAyB;AAC1B,QAAK,CAACK,KAAK,CAACC,OAAN,CAAeN,MAAf,CAAN,EAAgC;AAC/BA,MAAAA,MAAM,GAAG,CAAEA,MAAF,CAAT;AACA;;AAED,QAAK,OAAOD,OAAP,KAAmB,QAAxB,EAAmC;AAClCA,MAAAA,OAAO,GAAG;AAAEQ,QAAAA,MAAM,EAAER;AAAV,OAAV;AACA;;AAED,UAAMS,aAAa,GAAG,CAAC,CAACT,OAAO,CAACU,MAAhC;AACA,UAAMC,QAAQ,GAAGF,aAAa,GAAGR,MAAM,CAAE,CAAF,CAAT,GAAiB,CAA/C;;AAEA,UAAMW,gBAAgB,GAAGvB,UAAU,CAAE,KAAKK,UAAP,EAAmBM,OAAnB,EAA4BW,QAA5B,CAAnC;;AAEA,WAAOE,iBAAiB,CAAED,gBAAF,EAAoBX,MAApB,CAAxB;AACA;;AAvJ0B,C,CA0J5B;;AACA,SAASY,iBAAT,CAA4BL,MAA5B,EAAoCP,MAApC,EAA6C;AAC5C,SAAOO,MAAM,CAACM,OAAP,CAAgB,SAAhB,EAA2B,CAAEC,KAAF,EAASC,KAAT,KAAoB;AACrD,WAASA,KAAK,GAAGf,MAAM,CAACgB,MAAjB,GAA4BhB,MAAM,CAAEe,KAAF,CAAlC,GAA8CD,KAArD;AACA,GAFM,CAAP;AAGA,C,CAED;AACA;AACA;AACA;;;AACA,SAASlB,oBAAT,CAA+BqB,YAA/B,EAA8C;AAC7C,SAAO5B,kBAAkB,CAAC6B,QAAnB,CAA6BD,YAA7B,IAA8C,KAA9C,GAAsD,KAA7D;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/locale\n */\n\n/* globals console */\n\nimport { _translate } from './translation-service';\n\nconst RTL_LANGUAGE_CODES = [ 'ar', 'fa', 'he', 'ku', 'ug' ];\n\n/**\n * Represents the localization services.\n */\nexport default class Locale {\n\t/**\n\t * Creates a new instance of the locale class. Learn more about\n\t * {@glink features/ui-language configuring the language of the editor}.\n\t *\n\t * @param {Object} [options] Locale configuration.\n\t * @param {String} [options.uiLanguage='en'] The editor UI language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n\t * @param {String} [options.contentLanguage] The editor content language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n\t * See {@link #contentLanguage}.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * If the {@link #contentLanguage content language} was not specified in the `Locale` constructor,\n\t\t * it also defines the language of the content.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguage = options.uiLanguage || 'en';\n\n\t\t/**\n\t\t * The editor content language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * Usually the same as the {@link #uiLanguage editor language}, it can be customized by passing an optional\n\t\t * argument to the `Locale` constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguage = options.contentLanguage || this.uiLanguage;\n\n\t\t/**\n\t\t * Text direction of the {@link #uiLanguage editor UI language}. Either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguageDirection = getLanguageDirection( this.uiLanguage );\n\n\t\t/**\n\t\t * Text direction of the {@link #contentLanguage editor content language}.\n\t\t *\n\t\t * If the content language was passed directly to the `Locale` constructor, this property represents the\n\t\t * direction of that language.\n\t\t *\n\t\t * If the {@link #contentLanguage editor content language} was derived from the {@link #uiLanguage editor language},\n\t\t * the content language direction is the same as the {@link #uiLanguageDirection UI language direction}.\n\t\t *\n\t\t * The value is either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguageDirection = getLanguageDirection( this.contentLanguage );\n\n\t\t/**\n\t\t * Translates the given message to the {@link #uiLanguage}. This method is also available in\n\t\t * {@link module:core/editor/editor~Editor#t `Editor`} and {@link module:ui/view~View#t `View`}.\n\t\t *\n\t\t * This method's context is statically bound to the `Locale` instance and **should always be called as a function**:\n\t\t *\n\t\t *\t\tconst t = locale.t;\n\t\t *\t\tt( 'Label' );\n\t\t *\n\t\t * The message can be either a string or an object implementing the {@link module:utils/translation-service~Message} interface.\n\t\t *\n\t\t * The message may contain placeholders (`%<index>`) for value(s) that are passed as a `values` parameter.\n\t\t * For an array of values, the `%<index>` will be changed to an element of that array at the given index.\n\t\t * For a single value passed as the second argument, only the `%0` placeholders will be changed to the provided value.\n\t\t *\n\t\t *\t\tt( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n\t\t * \t\tt( 'Created file \"%0\", fileName );\n\t\t *\n\t\t * The message supports plural forms. To specify the plural form, use the `plural` property. Singular or plural form\n\t\t * will be chosen depending on the first value from the passed `values`. The value of the `plural` property is used\n\t\t * as a default plural translation when the translation for the target language is missing.\n\t\t *\n\t\t *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Add a space' for the English language.\n\t\t *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 5 ); // 'Add 5 spaces' for the English language.\n\t\t *\t\tt( { string: '%1 a space', plural: '%1 %0 spaces' }, [ 2, 'Add' ] ); // 'Add 2 spaces' for the English language.\n\t\t *\n\t\t * \t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Dodaj spacjÄ™' for the Polish language.\n\t\t *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 5 ); // 'Dodaj 5 spacji' for the Polish language.\n\t\t *\t\tt( { string: '%1 a space', plural: '%1 %0 spaces' }, [ 2, 'Add' ] ); // 'Dodaj 2 spacje' for the Polish language.\n\t\t *\n\t\t *  * The message should provide an ID using the `id` property when the message strings are not unique and their\n\t\t * translations should be different.\n\t\t *\n\t\t *\t\ttranslate( 'en', { string: 'image', id: 'ADD_IMAGE' } );\n\t\t *\t\ttranslate( 'en', { string: 'image', id: 'AN_IMAGE' } );\n\t\t *\n\t\t * @method #t\n\t\t * @param {String|module:utils/translation-service~Message} message A message that will be localized (translated).\n\t\t * @param {String|Number|Array.<String|Number>} [values] A value or an array of values that will fill message placeholders.\n\t\t * For messages supporting plural forms the first value will determine the plural form.\n\t\t * @returns {String}\n\t\t */\n\t\tthis.t = ( message, values ) => this._t( message, values );\n\t}\n\n\t/**\n\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t *\n\t * **Note**: This property was deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n\t * properties instead.\n\t *\n\t * @deprecated\n\t * @member {String}\n\t */\n\tget language() {\n\t\t/**\n\t\t * The {@link module:utils/locale~Locale#language `Locale#language`} property was deprecated and will\n\t\t * be removed in the near future. Please use the {@link #uiLanguage} and {@link #contentLanguage} properties instead.\n\t\t *\n\t\t * @error locale-deprecated-language-property\n\t\t */\n\t\tconsole.warn(\n\t\t\t'locale-deprecated-language-property: ' +\n\t\t\t'The Locale#language property has been deprecated and will be removed in the near future. ' +\n\t\t\t'Please use #uiLanguage and #contentLanguage properties instead.' );\n\n\t\treturn this.uiLanguage;\n\t}\n\n\t/**\n\t * An unbound version of the {@link #t} method.\n\t *\n\t * @private\n\t * @param {String|module:utils/translation-service~Message} message\n\t * @param {Number|String|Array.<Number|String>} [values]\n\t * @returns {String}\n\t */\n\t_t( message, values = [] ) {\n\t\tif ( !Array.isArray( values ) ) {\n\t\t\tvalues = [ values ];\n\t\t}\n\n\t\tif ( typeof message === 'string' ) {\n\t\t\tmessage = { string: message };\n\t\t}\n\n\t\tconst hasPluralForm = !!message.plural;\n\t\tconst quantity = hasPluralForm ? values[ 0 ] : 1;\n\n\t\tconst translatedString = _translate( this.uiLanguage, message, quantity );\n\n\t\treturn interpolateString( translatedString, values );\n\t}\n}\n\n// Fills the `%0, %1, ...` string placeholders with values.\nfunction interpolateString( string, values ) {\n\treturn string.replace( /%(\\d+)/g, ( match, index ) => {\n\t\treturn ( index < values.length ) ? values[ index ] : match;\n\t} );\n}\n\n// Helps determine whether a language is LTR or RTL.\n//\n// @param {String} language The ISO 639-1 language code.\n// @returns {String} 'ltr' or 'rtl\nfunction getLanguageDirection( languageCode ) {\n\treturn RTL_LANGUAGE_CODES.includes( languageCode ) ? 'rtl' : 'ltr';\n}\n"]},"metadata":{},"sourceType":"module"}