{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n// Exports an array with custom converters used by to-markdown library.\nexport default [// Converting code blocks with class name matching output from marked library.\n{\n  filter: node => {\n    const regexp = /lang-(.+)/;\n    return node.nodeName === 'PRE' && node.firstChild && node.firstChild.nodeName === 'CODE' && regexp.test(node.firstChild.className);\n  },\n  replacement: (content, node) => {\n    const regexp = /lang-(.+)/;\n    const lang = regexp.exec(node.firstChild.className)[1];\n    return '\\n\\n``` ' + lang + '\\n' + node.firstChild.textContent + '\\n```\\n\\n';\n  }\n}, // Converting empty links.\n{\n  filter: node => {\n    return node.nodeName === 'A' && !node.getAttribute('href');\n  },\n  replacement: (content, node) => {\n    const title = node.title ? `\"${node.title}\"` : '';\n    return `[${content}](${title})`;\n  }\n}, // Headers - fixing newline at the beginning.\n{\n  filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n  replacement: (content, node) => {\n    const hLevel = node.nodeName.charAt(1);\n    let hPrefix = '';\n\n    for (let i = 0; i < hLevel; i++) {\n      hPrefix += '#';\n    }\n\n    return hPrefix + ' ' + content + '\\n';\n  }\n}, // Inline code - fixing backticks inside code blocks.\n{\n  filter: node => {\n    const hasSiblings = node.previousSibling || node.nextSibling;\n    const isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n    return node.nodeName === 'CODE' && !isCodeBlock;\n  },\n  replacement: content => {\n    // If content starts or ends with backtick - use double backtick.\n    if (content.indexOf('`') > -1) {\n      return '`` ' + content + ' ``';\n    }\n\n    return '`' + content + '`';\n  }\n}];","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-markdown-gfm/src/lib/to-markdown/converters.js"],"names":["filter","node","regexp","nodeName","firstChild","test","className","replacement","content","lang","exec","textContent","getAttribute","title","hLevel","charAt","hPrefix","i","hasSiblings","previousSibling","nextSibling","isCodeBlock","parentNode","indexOf"],"mappings":"AAAA;;;;AAKA;AACA,eAAe,CACd;AACA;AACCA,EAAAA,MAAM,EAAIC,IAAF,IAAa;AACpB,UAAMC,MAAM,GAAG,WAAf;AAEA,WAAOD,IAAI,CAACE,QAAL,KAAkB,KAAlB,IACNF,IAAI,CAACG,UADC,IAENH,IAAI,CAACG,UAAL,CAAgBD,QAAhB,KAA6B,MAFvB,IAGND,MAAM,CAACG,IAAP,CAAaJ,IAAI,CAACG,UAAL,CAAgBE,SAA7B,CAHD;AAIA,GARF;AASCC,EAAAA,WAAW,EAAE,CAAEC,OAAF,EAAWP,IAAX,KAAqB;AACjC,UAAMC,MAAM,GAAG,WAAf;AACA,UAAMO,IAAI,GAAGP,MAAM,CAACQ,IAAP,CAAaT,IAAI,CAACG,UAAL,CAAgBE,SAA7B,EAA0C,CAA1C,CAAb;AAEA,WAAO,aAAaG,IAAb,GAAoB,IAApB,GAA2BR,IAAI,CAACG,UAAL,CAAgBO,WAA3C,GAAyD,WAAhE;AACA;AAdF,CAFc,EAkBd;AACA;AACCX,EAAAA,MAAM,EAAIC,IAAF,IAAY;AACnB,WAAOA,IAAI,CAACE,QAAL,KAAkB,GAAlB,IAAyB,CAACF,IAAI,CAACW,YAAL,CAAmB,MAAnB,CAAjC;AACA,GAHF;AAKCL,EAAAA,WAAW,EAAE,CAAEC,OAAF,EAAWP,IAAX,KAAqB;AACjC,UAAMY,KAAK,GAAGZ,IAAI,CAACY,KAAL,GAAc,IAAGZ,IAAI,CAACY,KAAM,GAA5B,GAAiC,EAA/C;AAEA,WAAQ,IAAIL,OAAS,KAAKK,KAAO,GAAjC;AACA;AATF,CAnBc,EA8Bd;AACA;AACCb,EAAAA,MAAM,EAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,CADT;AAECO,EAAAA,WAAW,EAAE,CAAEC,OAAF,EAAWP,IAAX,KAAqB;AACjC,UAAMa,MAAM,GAAGb,IAAI,CAACE,QAAL,CAAcY,MAAd,CAAsB,CAAtB,CAAf;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,MAArB,EAA6BG,CAAC,EAA9B,EAAmC;AAClCD,MAAAA,OAAO,IAAI,GAAX;AACA;;AAED,WAAOA,OAAO,GAAG,GAAV,GAAgBR,OAAhB,GAA0B,IAAjC;AACA;AAXF,CA/Bc,EA4Cd;AACA;AACCR,EAAAA,MAAM,EAAIC,IAAF,IAAY;AACnB,UAAMiB,WAAW,GAAGjB,IAAI,CAACkB,eAAL,IAAwBlB,IAAI,CAACmB,WAAjD;AACA,UAAMC,WAAW,GAAGpB,IAAI,CAACqB,UAAL,CAAgBnB,QAAhB,KAA6B,KAA7B,IAAsC,CAACe,WAA3D;AAEA,WAAOjB,IAAI,CAACE,QAAL,KAAkB,MAAlB,IAA4B,CAACkB,WAApC;AACA,GANF;AAOCd,EAAAA,WAAW,EAAIC,OAAF,IAAe;AAC3B;AACA,QAAKA,OAAO,CAACe,OAAR,CAAiB,GAAjB,IAAyB,CAAC,CAA/B,EAAmC;AAClC,aAAO,QAAQf,OAAR,GAAkB,KAAzB;AACA;;AAED,WAAO,MAAMA,OAAN,GAAgB,GAAvB;AACA;AAdF,CA7Cc,CAAf","sourcesContent":["/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n// Exports an array with custom converters used by to-markdown library.\nexport default [\n\t// Converting code blocks with class name matching output from marked library.\n\t{\n\t\tfilter: ( node ) =>  {\n\t\t\tconst regexp = /lang-(.+)/;\n\n\t\t\treturn node.nodeName === 'PRE' &&\n\t\t\t\tnode.firstChild &&\n\t\t\t\tnode.firstChild.nodeName === 'CODE' &&\n\t\t\t\tregexp.test( node.firstChild.className );\n\t\t},\n\t\treplacement: ( content, node ) => {\n\t\t\tconst regexp = /lang-(.+)/;\n\t\t\tconst lang = regexp.exec( node.firstChild.className )[ 1 ];\n\n\t\t\treturn '\\n\\n``` ' + lang + '\\n' + node.firstChild.textContent + '\\n```\\n\\n';\n\t\t}\n\t},\n\t// Converting empty links.\n\t{\n\t\tfilter: ( node ) => {\n\t\t\treturn node.nodeName === 'A' && !node.getAttribute( 'href' );\n\t\t},\n\n\t\treplacement: ( content, node ) => {\n\t\t\tconst title = node.title ? `\"${node.title}\"` : '';\n\n\t\t\treturn `[${ content }](${ title })`;\n\t\t}\n\t},\n\t// Headers - fixing newline at the beginning.\n\t{\n\t\tfilter: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ],\n\t\treplacement: ( content, node ) => {\n\t\t\tconst hLevel = node.nodeName.charAt( 1 );\n\t\t\tlet hPrefix = '';\n\n\t\t\tfor ( let i = 0; i < hLevel; i++ ) {\n\t\t\t\thPrefix += '#';\n\t\t\t}\n\n\t\t\treturn hPrefix + ' ' + content + '\\n';\n\t\t}\n\t},\n\t// Inline code - fixing backticks inside code blocks.\n\t{\n\t\tfilter: ( node ) => {\n\t\t\tconst hasSiblings = node.previousSibling || node.nextSibling;\n\t\t\tconst isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n\t\t\treturn node.nodeName === 'CODE' && !isCodeBlock;\n\t\t},\n\t\treplacement: ( content ) => {\n\t\t\t// If content starts or ends with backtick - use double backtick.\n\t\t\tif ( content.indexOf( '`' ) > -1 ) {\n\t\t\t\treturn '`` ' + content + ' ``';\n\t\t\t}\n\n\t\t\treturn '`' + content + '`';\n\t\t}\n\t}\n];\n"]},"metadata":{},"sourceType":"module"}