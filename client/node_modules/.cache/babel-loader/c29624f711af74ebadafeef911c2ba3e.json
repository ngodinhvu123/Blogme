{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\nimport View from '../view';\nimport '../../theme/components/inputtext/inputtext.css';\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class InputTextView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     */\n\n    this.set('value');\n    /**\n     * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n     *\n     * @observable\n     * @member {String} #id\n     */\n\n    this.set('id');\n    /**\n     * The `placeholder` attribute of the input.\n     *\n     * @observable\n     * @member {String} #placeholder\n     */\n\n    this.set('placeholder');\n    /**\n     * Controls whether the input view is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * Set to `true` when the field has some error. Usually controlled via\n     * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n     *\n     * @observable\n     * @member {Boolean} #hasError\n     */\n\n    this.set('hasError', false);\n    /**\n     * The `id` of the element describing this field, e.g. when it has\n     * some error, it helps screen readers read the error text.\n     *\n     * @observable\n     * @member {Boolean} #ariaDescribedById\n     */\n\n    this.set('ariaDescribedById');\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'input',\n      attributes: {\n        type: 'text',\n        class: ['ck', 'ck-input', 'ck-input-text', bind.if('hasError', 'ck-error')],\n        id: bind.to('id'),\n        placeholder: bind.to('placeholder'),\n        readonly: bind.to('isReadOnly'),\n        'aria-invalid': bind.if('hasError', true),\n        'aria-describedby': bind.to('ariaDescribedById')\n      },\n      on: {\n        input: bind.to('input')\n      }\n    });\n    /**\n     * Fired when the user types in the input. Corresponds to the native\n     * DOM `input` event.\n     *\n     * @event input\n     */\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n\n    const setValue = value => {\n      this.element.value = !value && value !== 0 ? '' : value;\n    };\n\n    setValue(this.value); // Bind `this.value` to the DOM element's value.\n    // We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\n    this.on('change:value', (evt, name, value) => {\n      setValue(value);\n    });\n  }\n  /**\n   * Moves the focus to the input and selects the value.\n   */\n\n\n  select() {\n    this.element.select();\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    this.element.focus();\n  }\n\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-ui/src/inputtext/inputtextview.js"],"names":["View","InputTextView","constructor","locale","set","bind","bindTemplate","setTemplate","tag","attributes","type","class","if","id","to","placeholder","readonly","on","input","render","setValue","value","element","evt","name","select","focus"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAO,gDAAP;AAEA;;;;;;AAKA,eAAe,MAAMC,aAAN,SAA4BD,IAA5B,CAAiC;AAC/C;;;AAGAE,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA;;;;;;;AAMA,SAAKC,GAAL,CAAU,OAAV;AAEA;;;;;;;AAMA,SAAKA,GAAL,CAAU,IAAV;AAEA;;;;;;;AAMA,SAAKA,GAAL,CAAU,aAAV;AAEA;;;;;;;AAMA,SAAKA,GAAL,CAAU,YAAV,EAAwB,KAAxB;AAEA;;;;;;;;AAOA,SAAKA,GAAL,CAAU,UAAV,EAAsB,KAAtB;AAEA;;;;;;;;AAOA,SAAKA,GAAL,CAAU,mBAAV;AAEA,UAAMC,IAAI,GAAG,KAAKC,YAAlB;AAEA,SAAKC,WAAL,CAAkB;AACjBC,MAAAA,GAAG,EAAE,OADY;AAEjBC,MAAAA,UAAU,EAAE;AACXC,QAAAA,IAAI,EAAE,MADK;AAEXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,UAFM,EAGN,eAHM,EAINN,IAAI,CAACO,EAAL,CAAS,UAAT,EAAqB,UAArB,CAJM,CAFI;AAQXC,QAAAA,EAAE,EAAER,IAAI,CAACS,EAAL,CAAS,IAAT,CARO;AASXC,QAAAA,WAAW,EAAEV,IAAI,CAACS,EAAL,CAAS,aAAT,CATF;AAUXE,QAAAA,QAAQ,EAAEX,IAAI,CAACS,EAAL,CAAS,YAAT,CAVC;AAWX,wBAAgBT,IAAI,CAACO,EAAL,CAAS,UAAT,EAAqB,IAArB,CAXL;AAYX,4BAAoBP,IAAI,CAACS,EAAL,CAAS,mBAAT;AAZT,OAFK;AAgBjBG,MAAAA,EAAE,EAAE;AACHC,QAAAA,KAAK,EAAEb,IAAI,CAACS,EAAL,CAAS,OAAT;AADJ;AAhBa,KAAlB;AAqBA;;;;;;AAMA;AAED;;;;;AAGAK,EAAAA,MAAM,GAAG;AACR,UAAMA,MAAN;;AAEA,UAAMC,QAAQ,GAAGC,KAAK,IAAI;AACzB,WAAKC,OAAL,CAAaD,KAAb,GAAuB,CAACA,KAAD,IAAUA,KAAK,KAAK,CAAtB,GAA4B,EAA5B,GAAiCA,KAAtD;AACA,KAFD;;AAIAD,IAAAA,QAAQ,CAAE,KAAKC,KAAP,CAAR,CAPQ,CASR;AACA;;AACA,SAAKJ,EAAL,CAAS,cAAT,EAAyB,CAAEM,GAAF,EAAOC,IAAP,EAAaH,KAAb,KAAwB;AAChDD,MAAAA,QAAQ,CAAEC,KAAF,CAAR;AACA,KAFD;AAGA;AAED;;;;;AAGAI,EAAAA,MAAM,GAAG;AACR,SAAKH,OAAL,CAAaG,MAAb;AACA;AAED;;;;;AAGAC,EAAAA,KAAK,GAAG;AACP,SAAKJ,OAAL,CAAaI,KAAb;AACA;;AAvH8C","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\n\nimport View from '../view';\nimport '../../theme/components/inputtext/inputtext.css';\n\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputTextView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * The `placeholder` attribute of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Set to `true` when the field has some error. Usually controlled via\n\t\t * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #hasError\n\t\t */\n\t\tthis.set( 'hasError', false );\n\n\t\t/**\n\t\t * The `id` of the element describing this field, e.g. when it has\n\t\t * some error, it helps screen readers read the error text.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #ariaDescribedById\n\t\t */\n\t\tthis.set( 'ariaDescribedById' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\t\t\tattributes: {\n\t\t\t\ttype: 'text',\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input',\n\t\t\t\t\t'ck-input-text',\n\t\t\t\t\tbind.if( 'hasError', 'ck-error' )\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\tplaceholder: bind.to( 'placeholder' ),\n\t\t\t\treadonly: bind.to( 'isReadOnly' ),\n\t\t\t\t'aria-invalid': bind.if( 'hasError', true ),\n\t\t\t\t'aria-describedby': bind.to( 'ariaDescribedById' )\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tinput: bind.to( 'input' )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Fired when the user types in the input. Corresponds to the native\n\t\t * DOM `input` event.\n\t\t *\n\t\t * @event input\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tconst setValue = value => {\n\t\t\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\n\t\t};\n\n\t\tsetValue( this.value );\n\n\t\t// Bind `this.value` to the DOM element's value.\n\t\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\t\tthis.on( 'change:value', ( evt, name, value ) => {\n\t\t\tsetValue( value );\n\t\t} );\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.element.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}