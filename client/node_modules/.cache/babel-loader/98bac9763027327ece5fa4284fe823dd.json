{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tai_lieu_hoc_vu\\\\blog_me\\\\client\\\\src\\\\Compoment\\\\Post\\\\TextAre.jsx\";\nimport React, { Component, PropTypes } from 'react';\nimport RichTextEditor, { stateToHTML } from \"react-rte\";\nimport ReactHtmlParser from 'react-html-parser';\n\nclass TextAre extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: RichTextEditor.createEmptyValue()\n    };\n\n    this.onChange = value => {\n      this.setState({\n        value\n      });\n\n      if (this.props.onChange) {\n        // Send the changes up to the parent component as an HTML string.\n        // This is here to demonstrate using `.toString()` but in a real app it\n        // would be better to avoid generating a string on each change.\n        this.props.onChange(value.toString(\"html\")); // handleSubmit = () => {\n\n        const {\n          editorState\n        } = this.props; // For testing purposes\n\n        console.log(stateToHTML(editorState.getCurrentContent())); // }\n      }\n    };\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.props;\n    console.log(\"this.props:\", this.state); // let html = stateToHTML(this.state.value);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RichTextEditor, {\n      placeholder: 'Bài viết mới của bạn !',\n      value: this.state.value,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }), this.state.value.toString(\"html\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, \"Preview:\"), ReactHtmlParser(this.state.value.toString(\"html\")));\n  }\n\n}\n\nexport default TextAre;","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/src/Compoment/Post/TextAre.jsx"],"names":["React","Component","PropTypes","RichTextEditor","stateToHTML","ReactHtmlParser","TextAre","state","value","createEmptyValue","onChange","setState","props","toString","editorState","console","log","getCurrentContent","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,cAAP,IAAyBC,WAAzB,QAA4C,WAA5C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BM,KAD4B,GACpB;AACJC,MAAAA,KAAK,EAAEL,cAAc,CAACM,gBAAf;AADH,KADoB;;AAAA,SAK5BC,QAL4B,GAKjBF,KAAK,IAAI;AAChB,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;;AACA,UAAI,KAAKI,KAAL,CAAWF,QAAf,EAAyB;AACrB;AACA;AACA;AACA,aAAKE,KAAL,CAAWF,QAAX,CAAoBF,KAAK,CAACK,QAAN,CAAe,MAAf,CAApB,EAJqB,CAMrB;;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAkB,KAAKF,KAA7B,CAPqB,CAQrB;;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAW,CAACU,WAAW,CAACG,iBAAZ,EAAD,CAAvB,EATqB,CAUrB;AACH;AACJ,KAnB2B;AAAA;;AAqB5BC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEJ,MAAAA;AAAF,QAAkB,KAAKF,KAA7B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKT,KAAhC,EAFK,CAGL;;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAE,wBAA7B;AAAuD,MAAA,KAAK,EAAE,KAAKA,KAAL,CAAWC,KAAzE;AAAgF,MAAA,QAAQ,EAAE,KAAKE,QAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKH,KAAL,CAAWC,KAAX,CAAiBK,QAAjB,CAA0B,MAA1B,CAFL,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,EAMKR,eAAe,CAAC,KAAKE,KAAL,CAAWC,KAAX,CAAiBK,QAAjB,CAA0B,MAA1B,CAAD,CANpB,CADJ;AAYH;;AArC2B;;AAyChC,eAAeP,OAAf","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport RichTextEditor, { stateToHTML } from \"react-rte\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nclass TextAre extends Component {\r\n    state = {\r\n        value: RichTextEditor.createEmptyValue()\r\n    };\r\n\r\n    onChange = value => {\r\n        this.setState({ value });\r\n        if (this.props.onChange) {\r\n            // Send the changes up to the parent component as an HTML string.\r\n            // This is here to demonstrate using `.toString()` but in a real app it\r\n            // would be better to avoid generating a string on each change.\r\n            this.props.onChange(value.toString(\"html\"));\r\n\r\n            // handleSubmit = () => {\r\n            const { editorState } = this.props;\r\n            // For testing purposes\r\n            console.log(stateToHTML(editorState.getCurrentContent()));\r\n            // }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { editorState } = this.props;\r\n        console.log(\"this.props:\", this.state)\r\n        // let html = stateToHTML(this.state.value);\r\n        return (\r\n            <div>\r\n                <RichTextEditor placeholder={'Bài viết mới của bạn !'} value={this.state.value} onChange={this.onChange} />\r\n                {this.state.value.toString(\"html\")}\r\n                <br />\r\n                <br />\r\n                <h3>Preview:</h3>\r\n                {ReactHtmlParser(this.state.value.toString(\"html\"))}\r\n                {/*html*/}\r\n                {/*stateToHTML(editorState.getCurrentContent())*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TextAre;"]},"metadata":{},"sourceType":"module"}