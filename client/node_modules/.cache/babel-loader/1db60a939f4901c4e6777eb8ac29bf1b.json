{"ast":null,"code":"/**\n * Custom module for quilljs to allow user to drag images from their file system into the editor\n * and paste images from clipboard (Works on Chrome, Firefox, Edge, not on Safari)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\nexport class ImageUpload {\n  /**\n   * Instantiate the module given a quill instance and any options\n   * @param {Quill} quill\n   * @param {Object} options\n   */\n  constructor(quill, options = {}) {\n    // save the quill reference\n    this.quill = quill; // save options\n\n    this.options = options; // listen for drop and paste events\n\n    this.quill.getModule('toolbar').addHandler('image', this.selectLocalImage.bind(this));\n  }\n  /**\n   * Select local image\n   */\n\n\n  selectLocalImage() {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'file');\n    input.click(); // Listen upload local image and save to server\n\n    input.onchange = () => {\n      const file = input.files[0]; // file type is only image.\n\n      if (/^image\\//.test(file.type)) {\n        const checkBeforeSend = this.options.checkBeforeSend || this.checkBeforeSend.bind(this);\n        checkBeforeSend(file, this.sendToServer.bind(this));\n      } else {\n        console.warn('You could only upload images.');\n      }\n    };\n  }\n  /**\n   * Check file before sending to the server\n   * @param {File} file\n   * @param {Function} next\n   */\n\n\n  checkBeforeSend(file, next) {\n    next(file);\n  }\n  /**\n   * Send to server\n   * @param {File} file\n   */\n\n\n  sendToServer(file) {\n    // Handle custom upload\n    if (this.options.customUploader) {\n      this.options.customUploader(file, dataUrl => {\n        this.insert(dataUrl);\n      });\n    } else {\n      const url = this.options.url,\n            method = this.options.method || 'POST',\n            name = this.options.name || 'image',\n            headers = this.options.headers || {},\n            callbackOK = this.options.callbackOK || this.uploadImageCallbackOK.bind(this),\n            callbackKO = this.options.callbackKO || this.uploadImageCallbackKO.bind(this);\n\n      if (url) {\n        const fd = new FormData();\n        fd.append(name, file);\n\n        if (this.options.csrf) {\n          // add CSRF\n          fd.append(this.options.csrf.token, this.options.csrf.hash);\n        }\n\n        const xhr = new XMLHttpRequest(); // init http query\n\n        xhr.open(method, url, true); // add custom headers\n\n        for (var index in headers) {\n          xhr.setRequestHeader(index, headers[index]);\n        } // listen callback\n\n\n        xhr.onload = () => {\n          if (xhr.status === 200) {\n            callbackOK(JSON.parse(xhr.responseText), this.insert.bind(this));\n          } else {\n            callbackKO({\n              code: xhr.status,\n              type: xhr.statusText,\n              body: xhr.responseText\n            });\n          }\n        };\n\n        if (this.options.withCredentials) {\n          xhr.withCredentials = true;\n        }\n\n        xhr.send(fd);\n      } else {\n        const reader = new FileReader();\n\n        reader.onload = event => {\n          callbackOK(event.target.result, this.insert.bind(this));\n        };\n\n        reader.readAsDataURL(file);\n      }\n    }\n  }\n  /**\n   * Insert the image into the document at the current cursor position\n   * @param {String} dataUrl  The base64-encoded image URI\n   */\n\n\n  insert(dataUrl) {\n    const index = (this.quill.getSelection() || {}).index || this.quill.getLength();\n    this.quill.insertEmbed(index, 'image', dataUrl, 'user');\n  }\n  /**\n   * callback on image upload succesfull\n   * @param {Any} response http response\n   */\n\n\n  uploadImageCallbackOK(response, next) {\n    next(response);\n  }\n  /**\n   * callback on image upload failed\n   * @param {Any} error http error\n   */\n\n\n  uploadImageCallbackKO(error) {\n    alert(error);\n  }\n\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/quill-image-upload/index.js"],"names":["ImageUpload","constructor","quill","options","getModule","addHandler","selectLocalImage","bind","input","document","createElement","setAttribute","click","onchange","file","files","test","type","checkBeforeSend","sendToServer","console","warn","next","customUploader","dataUrl","insert","url","method","name","headers","callbackOK","uploadImageCallbackOK","callbackKO","uploadImageCallbackKO","fd","FormData","append","csrf","token","hash","xhr","XMLHttpRequest","open","index","setRequestHeader","onload","status","JSON","parse","responseText","code","statusText","body","withCredentials","send","reader","FileReader","event","target","result","readAsDataURL","getSelection","getLength","insertEmbed","response","error","alert"],"mappings":"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","sourcesContent":["/**\n * Custom module for quilljs to allow user to drag images from their file system into the editor\n * and paste images from clipboard (Works on Chrome, Firefox, Edge, not on Safari)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\nexport class ImageUpload {\n\t/**\n\t * Instantiate the module given a quill instance and any options\n\t * @param {Quill} quill\n\t * @param {Object} options\n\t */\n\tconstructor(quill, options = {}) {\n\t\t// save the quill reference\n\t\tthis.quill = quill;\n\t\t// save options\n\t\tthis.options = options;\n\t\t// listen for drop and paste events\n\t\tthis.quill\n\t\t\t.getModule('toolbar')\n\t\t\t.addHandler('image', this.selectLocalImage.bind(this));\n\t}\n\n\t/**\n\t * Select local image\n\t */\n\tselectLocalImage() {\n\t\tconst input = document.createElement('input');\n\t\tinput.setAttribute('type', 'file');\n\t\tinput.click();\n\n\t\t// Listen upload local image and save to server\n\t\tinput.onchange = () => {\n\t\t\tconst file = input.files[0];\n\n\t\t\t// file type is only image.\n\t\t\tif (/^image\\//.test(file.type)) {\n\t\t\t\tconst checkBeforeSend =\n\t\t\t\t\tthis.options.checkBeforeSend || this.checkBeforeSend.bind(this);\n\t\t\t\tcheckBeforeSend(file, this.sendToServer.bind(this));\n\t\t\t} else {\n\t\t\t\tconsole.warn('You could only upload images.');\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Check file before sending to the server\n\t * @param {File} file\n\t * @param {Function} next\n\t */\n\tcheckBeforeSend(file, next) {\n\t\tnext(file);\n\t}\n\n\t/**\n\t * Send to server\n\t * @param {File} file\n\t */\n\tsendToServer(file) {\n\t\t// Handle custom upload\n\t\tif (this.options.customUploader) {\n\t\t\tthis.options.customUploader(file, dataUrl => {\n\t\t\t\tthis.insert(dataUrl);\n\t\t\t});\n\t\t} else {\n\t\t\tconst url = this.options.url,\n\t\t\t\tmethod = this.options.method || 'POST',\n\t\t\t\tname = this.options.name || 'image',\n\t\t\t\theaders = this.options.headers || {},\n\t\t\t\tcallbackOK =\n\t\t\t\t\tthis.options.callbackOK || this.uploadImageCallbackOK.bind(this),\n\t\t\t\tcallbackKO =\n\t\t\t\t\tthis.options.callbackKO || this.uploadImageCallbackKO.bind(this);\n\n\t\t\tif (url) {\n\t\t\t\tconst fd = new FormData();\n\n\t\t\t\tfd.append(name, file);\n\n\t\t\t\tif (this.options.csrf) {\n\t\t\t\t\t// add CSRF\n\t\t\t\t\tfd.append(this.options.csrf.token, this.options.csrf.hash);\n\t\t\t\t}\n\n\t\t\t\tconst xhr = new XMLHttpRequest();\n\t\t\t\t// init http query\n\t\t\t\txhr.open(method, url, true);\n\t\t\t\t// add custom headers\n\t\t\t\tfor (var index in headers) {\n\t\t\t\t\txhr.setRequestHeader(index, headers[index]);\n\t\t\t\t}\n\n\t\t\t\t// listen callback\n\t\t\t\txhr.onload = () => {\n\t\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\t\tcallbackOK(JSON.parse(xhr.responseText), this.insert.bind(this));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallbackKO({\n\t\t\t\t\t\t\tcode: xhr.status,\n\t\t\t\t\t\t\ttype: xhr.statusText,\n\t\t\t\t\t\t\tbody: xhr.responseText\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (this.options.withCredentials) {\n\t\t\t\t\txhr.withCredentials = true;\n\t\t\t\t}\n\n\t\t\t\txhr.send(fd);\n\t\t\t} else {\n\t\t\t\tconst reader = new FileReader();\n\n\t\t\t\treader.onload = event => {\n\t\t\t\t\tcallbackOK(event.target.result, this.insert.bind(this));\n\t\t\t\t};\n\t\t\t\treader.readAsDataURL(file);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Insert the image into the document at the current cursor position\n\t * @param {String} dataUrl  The base64-encoded image URI\n\t */\n\tinsert(dataUrl) {\n\t\tconst index =\n\t\t\t(this.quill.getSelection() || {}).index || this.quill.getLength();\n\t\tthis.quill.insertEmbed(index, 'image', dataUrl, 'user');\n\t}\n\n\t/**\n\t * callback on image upload succesfull\n\t * @param {Any} response http response\n\t */\n\tuploadImageCallbackOK(response, next) {\n\t\tnext(response);\n\t}\n\n\t/**\n\t * callback on image upload failed\n\t * @param {Any} error http error\n\t */\n\tuploadImageCallbackKO(error) {\n\t\talert(error);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}