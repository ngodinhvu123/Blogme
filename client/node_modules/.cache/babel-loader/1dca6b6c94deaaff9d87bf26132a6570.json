{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tai_lieu_hoc_vu\\\\blog_me\\\\client\\\\src\\\\Compoment\\\\Post\\\\TextAre.jsx\";\nimport React, { Component, PropTypes } from 'react';\nimport RichTextEditor, { stateToHTML } from \"react-rte\";\nconst toolbarConfig = {\n  // Optionally specify the groups to display (displayed in the order listed).\n  display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'LINK_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n  INLINE_STYLE_BUTTONS: [{\n    label: 'Bold',\n    style: 'BOLD',\n    className: 'custom-css-class'\n  }, {\n    label: 'Italic',\n    style: 'ITALIC'\n  }, {\n    label: 'Underline',\n    style: 'UNDERLINE'\n  }],\n  BLOCK_TYPE_DROPDOWN: [{\n    label: 'Normal',\n    style: 'unstyled'\n  }, {\n    label: 'Heading Large',\n    style: 'header-one'\n  }, {\n    label: 'Heading Medium',\n    style: 'header-two'\n  }, {\n    label: 'Heading Small',\n    style: 'header-three'\n  }],\n  BLOCK_TYPE_BUTTONS: [{\n    label: 'UL',\n    style: 'unordered-list-item'\n  }, {\n    label: 'OL',\n    style: 'ordered-list-item'\n  }]\n};\n\nclass TextAre extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: RichTextEditor.createEmptyValue()\n    };\n\n    this.onChange = value => {\n      this.setState({\n        value\n      });\n\n      if (this.props.onChange) {\n        // Send the changes up to the parent component as an HTML string.\n        // This is here to demonstrate using `.toString()` but in a real app it\n        // would be better to avoid generating a string on each change.\n        this.props.onChange(value.toString(\"html\")); // handleSubmit = () => {\n\n        const {\n          editorState\n        } = this.props; // For testing purposes\n\n        console.log(stateToHTML(editorState.getCurrentContent())); // }\n      }\n    };\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.props;\n    console.log(\"this.props:\", this.state); // let html = stateToHTML(this.state.value);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RichTextEditor, {\n      toolbarConfig: toolbarConfig,\n      value: this.state.value,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }), this.state.value.toString(\"markdown\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, \"Preview:\"));\n  }\n\n}\n\nexport default TextAre;","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/src/Compoment/Post/TextAre.jsx"],"names":["React","Component","PropTypes","RichTextEditor","stateToHTML","toolbarConfig","display","INLINE_STYLE_BUTTONS","label","style","className","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","TextAre","state","value","createEmptyValue","onChange","setState","props","toString","editorState","console","log","getCurrentContent","render"],"mappings":"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","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport RichTextEditor, { stateToHTML } from \"react-rte\";\r\n\r\nconst toolbarConfig = {\r\n    // Optionally specify the groups to display (displayed in the order listed).\r\n    display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'LINK_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\r\n    INLINE_STYLE_BUTTONS: [\r\n        { label: 'Bold', style: 'BOLD', className: 'custom-css-class' },\r\n        { label: 'Italic', style: 'ITALIC' },\r\n        { label: 'Underline', style: 'UNDERLINE' }\r\n    ],\r\n    BLOCK_TYPE_DROPDOWN: [\r\n        { label: 'Normal', style: 'unstyled' },\r\n        { label: 'Heading Large', style: 'header-one' },\r\n        { label: 'Heading Medium', style: 'header-two' },\r\n        { label: 'Heading Small', style: 'header-three' }\r\n    ],\r\n    BLOCK_TYPE_BUTTONS: [\r\n        { label: 'UL', style: 'unordered-list-item' },\r\n        { label: 'OL', style: 'ordered-list-item' }\r\n    ]\r\n};\r\nclass TextAre extends Component {\r\n    state = {\r\n        value: RichTextEditor.createEmptyValue()\r\n    };\r\n\r\n    onChange = value => {\r\n        this.setState({ value });\r\n        if (this.props.onChange) {\r\n            // Send the changes up to the parent component as an HTML string.\r\n            // This is here to demonstrate using `.toString()` but in a real app it\r\n            // would be better to avoid generating a string on each change.\r\n            this.props.onChange(value.toString(\"html\"));\r\n\r\n            // handleSubmit = () => {\r\n            const { editorState } = this.props;\r\n            // For testing purposes\r\n            console.log(stateToHTML(editorState.getCurrentContent()));\r\n            // }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { editorState } = this.props;\r\n        console.log(\"this.props:\", this.state)\r\n        // let html = stateToHTML(this.state.value);\r\n        return (\r\n            <div>\r\n                <RichTextEditor toolbarConfig={toolbarConfig} value={this.state.value} onChange={this.onChange} />\r\n                {this.state.value.toString(\"markdown\")}\r\n                <br />\r\n                <br />\r\n                <h3>Preview:</h3>\r\n                {/*ReactHtmlParser(this.state.value.toString(\"html\"))*/}\r\n                {/*html*/}\r\n                {/*stateToHTML(editorState.getCurrentContent())*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TextAre;"]},"metadata":{},"sourceType":"module"}