{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport StylesMap from './stylesmap'; // @if CK_DEBUG_ENGINE // const { convertMapToTags } = require( '../dev-utils/utils' );\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\n\nexport default class Element extends Node {\n  /**\n   * Creates a view element.\n   *\n   * Attributes can be passed in various formats:\n   *\n   *\t\tnew Element( viewDocument, 'div', { class: 'editor', contentEditable: 'true' } ); // object\n   *\t\tnew Element( viewDocument, 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n   *\t\tnew Element( viewDocument, 'div', mapOfAttributes ); // map\n   *\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   */\n  constructor(document, name, attrs, children) {\n    super(document);\n    /**\n     * Name of the element.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.name = name;\n    /**\n     * Map of attributes, where attributes names are keys and attributes values are values.\n     *\n     * @protected\n     * @member {Map} #_attrs\n     */\n\n    this._attrs = parseAttributes(attrs);\n    /**\n     * Array of child nodes.\n     *\n     * @protected\n     * @member {Array.<module:engine/view/node~Node>}\n     */\n\n    this._children = [];\n\n    if (children) {\n      this._insertChild(0, children);\n    }\n    /**\n     * Set of classes associated with element instance.\n     *\n     * @protected\n     * @member {Set}\n     */\n\n\n    this._classes = new Set();\n\n    if (this._attrs.has('class')) {\n      // Remove class attribute and handle it by class set.\n      const classString = this._attrs.get('class');\n\n      parseClasses(this._classes, classString);\n\n      this._attrs.delete('class');\n    }\n    /**\n     * Normalized styles.\n     *\n     * @protected\n     * @member {module:engine/view/stylesmap~StylesMap} module:engine/view/element~Element#_styles\n     */\n\n\n    this._styles = new StylesMap(this.document.stylesProcessor);\n\n    if (this._attrs.has('style')) {\n      // Remove style attribute and handle it by styles map.\n      this._styles.setTo(this._attrs.get('style'));\n\n      this._attrs.delete('style');\n    }\n    /**\n     * Map of custom properties.\n     * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n     *\n     * @protected\n     * @member {Map}\n     */\n\n\n    this._customProperties = new Map();\n  }\n  /**\n   * Number of element's children.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get childCount() {\n    return this._children.length;\n  }\n  /**\n   * Is `true` if there are no nodes inside this element, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isEmpty() {\n    return this._children.length === 0;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\telement.is( 'element' ); // -> true\n   *\t\telement.is( 'node' ); // -> true\n   *\t\telement.is( 'view:element' ); // -> true\n   *\t\telement.is( 'view:node' ); // -> true\n   *\n   *\t\telement.is( 'model:element' ); // -> false\n   *\t\telement.is( 'documentSelection' ); // -> false\n   *\n   * Assuming that the object being checked is an element, you can also check its\n   * {@link module:engine/view/element~Element#name name}:\n   *\n   *\t\telement.is( 'img' ); // -> true if this is an <img> element\n   *\t\telement.is( 'element', 'img' ); // -> same as above\n   *\t\ttext.is( 'img' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    if (!name) {\n      return type === this.name || type === 'view:' + this.name || type === 'element' || type === 'view:element' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n      type === 'node' || type === 'view:node';\n    } else {\n      return name === this.name && (type === 'element' || type === 'view:element');\n    }\n  }\n  /**\n   * Gets child at the given index.\n   *\n   * @param {Number} index Index of child.\n   * @returns {module:engine/view/node~Node} Child node.\n   */\n\n\n  getChild(index) {\n    return this._children[index];\n  }\n  /**\n   * Gets index of the given child node. Returns `-1` if child node is not found.\n   *\n   * @param {module:engine/view/node~Node} node Child node.\n   * @returns {Number} Index of the child node.\n   */\n\n\n  getChildIndex(node) {\n    return this._children.indexOf(node);\n  }\n  /**\n   * Gets child nodes iterator.\n   *\n   * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n   */\n\n\n  getChildren() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n   *\n   * @returns {Iterable.<String>} Keys for attributes.\n   */\n\n\n  *getAttributeKeys() {\n    if (this._classes.size > 0) {\n      yield 'class';\n    }\n\n    if (!this._styles.isEmpty) {\n      yield 'style';\n    }\n\n    yield* this._attrs.keys();\n  }\n  /**\n   * Returns iterator that iterates over this element's attributes.\n   *\n   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  *getAttributes() {\n    yield* this._attrs.entries();\n\n    if (this._classes.size > 0) {\n      yield ['class', this.getAttribute('class')];\n    }\n\n    if (!this._styles.isEmpty) {\n      yield ['style', this.getAttribute('style')];\n    }\n  }\n  /**\n   * Gets attribute by key. If attribute is not present - returns undefined.\n   *\n   * @param {String} key Attribute key.\n   * @returns {String|undefined} Attribute value.\n   */\n\n\n  getAttribute(key) {\n    if (key == 'class') {\n      if (this._classes.size > 0) {\n        return [...this._classes].join(' ');\n      }\n\n      return undefined;\n    }\n\n    if (key == 'style') {\n      const inlineStyle = this._styles.toString();\n\n      return inlineStyle == '' ? undefined : inlineStyle;\n    }\n\n    return this._attrs.get(key);\n  }\n  /**\n   * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n   *\n   * @param {String} key Attribute key.\n   * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n   */\n\n\n  hasAttribute(key) {\n    if (key == 'class') {\n      return this._classes.size > 0;\n    }\n\n    if (key == 'style') {\n      return !this._styles.isEmpty;\n    }\n\n    return this._attrs.has(key);\n  }\n  /**\n   * Checks if this element is similar to other element.\n   * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n   * can contain different set of children nodes.\n   *\n   * @param {module:engine/view/element~Element} otherElement\n   * @returns {Boolean}\n   */\n\n\n  isSimilar(otherElement) {\n    if (!(otherElement instanceof Element)) {\n      return false;\n    } // If exactly the same Element is provided - return true immediately.\n\n\n    if (this === otherElement) {\n      return true;\n    } // Check element name.\n\n\n    if (this.name != otherElement.name) {\n      return false;\n    } // Check number of attributes, classes and styles.\n\n\n    if (this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size || this._styles.size !== otherElement._styles.size) {\n      return false;\n    } // Check if attributes are the same.\n\n\n    for (const [key, value] of this._attrs) {\n      if (!otherElement._attrs.has(key) || otherElement._attrs.get(key) !== value) {\n        return false;\n      }\n    } // Check if classes are the same.\n\n\n    for (const className of this._classes) {\n      if (!otherElement._classes.has(className)) {\n        return false;\n      }\n    } // Check if styles are the same.\n\n\n    for (const property of this._styles.getStyleNames()) {\n      if (!otherElement._styles.has(property) || otherElement._styles.getAsString(property) !== this._styles.getAsString(property)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns true if class is present.\n   * If more then one class is provided - returns true only when all classes are present.\n   *\n   *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n   *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n   *\n   * @param {...String} className\n   */\n\n\n  hasClass(...className) {\n    for (const name of className) {\n      if (!this._classes.has(name)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns iterator that contains all class names.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getClassNames() {\n    return this._classes.keys();\n  }\n  /**\n   * Returns style value for the given property mae.\n   * If the style does not exist `undefined` is returned.\n   *\n   * **Note**: This method can work with normalized style names if\n   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n   * See {@link module:engine/view/stylesmap~StylesMap#getAsString `StylesMap#getAsString()`} for details.\n   *\n   * For an element with style set to `'margin:1px'`:\n   *\n   *\t\t// Enable 'margin' shorthand processing:\n   *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n   *\n   *\t\tconst element = view.change( writer => {\n   *\t\t\tconst element = writer.createElement();\n   *\t\t\twriter.setStyle( 'margin', '1px' );\n   *\t\t\twriter.setStyle( 'margin-bottom', '3em' );\n   *\n   *\t\t\treturn element;\n   *\t\t} );\n   *\n   *\t\telement.getStyle( 'margin' ); // -> 'margin: 1px 1px 3em;'\n   *\n   * @param {String} property\n   * @returns {String|undefined}\n   */\n\n\n  getStyle(property) {\n    return this._styles.getAsString(property);\n  }\n  /**\n   * Returns a normalized style object or single style value.\n   *\n   * For an element with style set to: margin:1px 2px 3em;\n   *\n   *\t\telement.getNormalizedStyle( 'margin' ) );\n   *\n   * will return:\n   *\n   *\t\t{\n   *\t\t\ttop: '1px',\n   *\t\t\tright: '2px',\n   *\t\t\tbottom: '3em',\n   *\t\t\tleft: '2px'    // a normalized value from margin shorthand\n   *\t\t}\n   *\n   * and reading for single style value:\n   *\n   *\t\tstyles.getNormalizedStyle( 'margin-left' );\n   *\n   * Will return a `2px` string.\n   *\n   * **Note**: This method will return normalized values only if\n   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n   * See {@link module:engine/view/stylesmap~StylesMap#getNormalized `StylesMap#getNormalized()`} for details.\n   *\n   *\n   * @param {String} property Name of CSS property\n   * @returns {Object|String|undefined}\n   */\n\n\n  getNormalizedStyle(property) {\n    return this._styles.getNormalized(property);\n  }\n  /**\n   * Returns iterator that contains all style names.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getStyleNames() {\n    return this._styles.getStyleNames();\n  }\n  /**\n   * Returns true if style keys are present.\n   * If more then one style property is provided - returns true only when all properties are present.\n   *\n   *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n   *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n   *\n   * @param {...String} property\n   */\n\n\n  hasStyle(...property) {\n    for (const name of property) {\n      if (!this._styles.has(name)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns ancestor element that match specified pattern.\n   * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n   *\n   * @see module:engine/view/matcher~Matcher\n   * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n   * See {@link module:engine/view/matcher~Matcher}.\n   * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n   */\n\n\n  findAncestor(...patterns) {\n    const matcher = new Matcher(...patterns);\n    let parent = this.parent;\n\n    while (parent) {\n      if (matcher.match(parent)) {\n        return parent;\n      }\n\n      parent = parent.parent;\n    }\n\n    return null;\n  }\n  /**\n   * Returns the custom property value for the given key.\n   *\n   * @param {String|Symbol} key\n   * @returns {*}\n   */\n\n\n  getCustomProperty(key) {\n    return this._customProperties.get(key);\n  }\n  /**\n   * Returns an iterator which iterates over this element's custom properties.\n   * Iterator provides `[ key, value ]` pairs for each stored property.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  *getCustomProperties() {\n    yield* this._customProperties.entries();\n  }\n  /**\n   * Returns identity string based on element's name, styles, classes and other attributes.\n   * Two elements that {@link #isSimilar are similar} will have same identity string.\n   * It has the following format:\n   *\n   *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n  \t *\n   * For example:\n   *\n   *\t\tconst element = writer.createContainerElement( 'foo', {\n   *\t\t\tbanana: '10',\n   *\t\t\tapple: '20',\n   *\t\t\tstyle: 'color: red; border-color: white;',\n   *\t\t\tclass: 'baz'\n   *\t\t} );\n   *\n   *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n   *\t\telement.getIdentity();\n   *\n   * **Note**: Classes, styles and other attributes are sorted alphabetically.\n   *\n   * @returns {String}\n   */\n\n\n  getIdentity() {\n    const classes = Array.from(this._classes).sort().join(',');\n\n    const styles = this._styles.toString();\n\n    const attributes = Array.from(this._attrs).map(i => `${i[0]}=\"${i[1]}\"`).sort().join(' ');\n    return this.name + (classes == '' ? '' : ` class=\"${classes}\"`) + (!styles ? '' : ` style=\"${styles}\"`) + (attributes == '' ? '' : ` ${attributes}`);\n  }\n  /**\n   * Clones provided element.\n   *\n   * @protected\n   * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any children.\n   * @returns {module:engine/view/element~Element} Clone of this element.\n   */\n\n\n  _clone(deep = false) {\n    const childrenClone = [];\n\n    if (deep) {\n      for (const child of this.getChildren()) {\n        childrenClone.push(child._clone(deep));\n      }\n    } // ContainerElement and AttributeElement should be also cloned properly.\n\n\n    const cloned = new this.constructor(this.document, this.name, this._attrs, childrenClone); // Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n    // parse once again in constructor.\n\n    cloned._classes = new Set(this._classes);\n\n    cloned._styles.set(this._styles.getNormalized()); // Clone custom properties.\n\n\n    cloned._customProperties = new Map(this._customProperties); // Clone filler offset method.\n    // We can't define this method in a prototype because it's behavior which\n    // is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\n    cloned.getFillerOffset = this.getFillerOffset;\n    return cloned;\n  }\n  /**\n   * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n   * and sets the parent of these nodes to this element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#insert\n   * @protected\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @fires module:engine/view/node~Node#change\n   * @returns {Number} Number of appended nodes.\n   */\n\n\n  _appendChild(items) {\n    return this._insertChild(this.childCount, items);\n  }\n  /**\n   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n   * this element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#insert\n   * @protected\n   * @param {Number} index Position where nodes should be inserted.\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @fires module:engine/view/node~Node#change\n   * @returns {Number} Number of inserted nodes.\n   */\n\n\n  _insertChild(index, items) {\n    this._fireChange('children', this);\n\n    let count = 0;\n    const nodes = normalize(this.document, items);\n\n    for (const node of nodes) {\n      // If node that is being added to this element is already inside another element, first remove it from the old parent.\n      if (node.parent !== null) {\n        node._remove();\n      }\n\n      node.parent = this;\n      node.document = this.document;\n\n      this._children.splice(index, 0, node);\n\n      index++;\n      count++;\n    }\n\n    return count;\n  }\n  /**\n   * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#remove\n   * @protected\n   * @param {Number} index Number of the first node to remove.\n   * @param {Number} [howMany=1] Number of nodes to remove.\n   * @fires module:engine/view/node~Node#change\n   * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n   */\n\n\n  _removeChildren(index, howMany = 1) {\n    this._fireChange('children', this);\n\n    for (let i = index; i < index + howMany; i++) {\n      this._children[i].parent = null;\n    }\n\n    return this._children.splice(index, howMany);\n  }\n  /**\n   * Adds or overwrite attribute with a specified key and value.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n   * @protected\n   * @param {String} key Attribute key.\n   * @param {String} value Attribute value.\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _setAttribute(key, value) {\n    value = String(value);\n\n    this._fireChange('attributes', this);\n\n    if (key == 'class') {\n      parseClasses(this._classes, value);\n    } else if (key == 'style') {\n      this._styles.setTo(value);\n    } else {\n      this._attrs.set(key, value);\n    }\n  }\n  /**\n   * Removes attribute from the element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n   * @protected\n   * @param {String} key Attribute key.\n   * @returns {Boolean} Returns true if an attribute existed and has been removed.\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _removeAttribute(key) {\n    this._fireChange('attributes', this); // Remove class attribute.\n\n\n    if (key == 'class') {\n      if (this._classes.size > 0) {\n        this._classes.clear();\n\n        return true;\n      }\n\n      return false;\n    } // Remove style attribute.\n\n\n    if (key == 'style') {\n      if (!this._styles.isEmpty) {\n        this._styles.clear();\n\n        return true;\n      }\n\n      return false;\n    } // Remove other attributes.\n\n\n    return this._attrs.delete(key);\n  }\n  /**\n   * Adds specified class.\n   *\n   *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n   *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n   * @protected\n   * @param {Array.<String>|String} className\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _addClass(className) {\n    this._fireChange('attributes', this);\n\n    className = Array.isArray(className) ? className : [className];\n    className.forEach(name => this._classes.add(name));\n  }\n  /**\n   * Removes specified class.\n   *\n   *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n   *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n   * @protected\n   * @param {Array.<String>|String} className\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _removeClass(className) {\n    this._fireChange('attributes', this);\n\n    className = Array.isArray(className) ? className : [className];\n    className.forEach(name => this._classes.delete(name));\n  }\n  /**\n   * Adds style to the element.\n   *\n   *\t\telement._setStyle( 'color', 'red' );\n   *\t\telement._setStyle( {\n   *\t\t\tcolor: 'red',\n   *\t\t\tposition: 'fixed'\n   *\t\t} );\n   *\n   * **Note**: This method can work with normalized style names if\n   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n   * See {@link module:engine/view/stylesmap~StylesMap#set `StylesMap#set()`} for details.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n   * @protected\n   * @param {String|Object} property Property name or object with key - value pairs.\n   * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _setStyle(property, value) {\n    this._fireChange('attributes', this);\n\n    this._styles.set(property, value);\n  }\n  /**\n   * Removes specified style.\n   *\n   *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n   *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n   *\n   * **Note**: This method can work with normalized style names if\n   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n   * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n   * @protected\n   * @param {Array.<String>|String} property\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _removeStyle(property) {\n    this._fireChange('attributes', this);\n\n    property = Array.isArray(property) ? property : [property];\n    property.forEach(name => this._styles.remove(name));\n  }\n  /**\n   * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n   * so they can be used to add special data to elements.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n   * @protected\n   * @param {String|Symbol} key\n   * @param {*} value\n   */\n\n\n  _setCustomProperty(key, value) {\n    this._customProperties.set(key, value);\n  }\n  /**\n   * Removes the custom property stored under the given key.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n   * @protected\n   * @param {String|Symbol} key\n   * @returns {Boolean} Returns true if property was removed.\n   */\n\n\n  _removeCustomProperty(key) {\n    return this._customProperties.delete(key);\n  }\n  /**\n   * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n   *\n   * @abstract\n   * @method module:engine/view/element~Element#getFillerOffset\n   */\n  // @if CK_DEBUG_ENGINE // printTree( level = 0) {\n  // @if CK_DEBUG_ENGINE // \tlet string = '';\n  // @if CK_DEBUG_ENGINE //\tstring += '\\t'.repeat( level ) + `<${ this.name }${ convertMapToTags( this.getAttributes() ) }>`;\n  // @if CK_DEBUG_ENGINE //\tfor ( const child of this.getChildren() ) {\n  // @if CK_DEBUG_ENGINE //\t\tif ( child.is( 'text' ) ) {\n  // @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + '\\t'.repeat( level + 1 ) + child.data;\n  // @if CK_DEBUG_ENGINE //\t\t} else {\n  // @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + child.printTree( level + 1 );\n  // @if CK_DEBUG_ENGINE //\t\t}\n  // @if CK_DEBUG_ENGINE //\t}\n  // @if CK_DEBUG_ENGINE //\tif ( this.childCount ) {\n  // @if CK_DEBUG_ENGINE //\t\tstring += '\\n' + '\\t'.repeat( level );\n  // @if CK_DEBUG_ENGINE //\t}\n  // @if CK_DEBUG_ENGINE //\tstring += `</${ this.name }>`;\n  // @if CK_DEBUG_ENGINE //\treturn string;\n  // @if CK_DEBUG_ENGINE // }\n  // @if CK_DEBUG_ENGINE // logTree() {\n  // @if CK_DEBUG_ENGINE // \tconsole.log( this.printTree() );\n  // @if CK_DEBUG_ENGINE // }\n\n\n} // Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Iterable`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Iterable} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\n\nfunction parseAttributes(attrs) {\n  attrs = toMap(attrs);\n\n  for (const [key, value] of attrs) {\n    if (value === null) {\n      attrs.delete(key);\n    } else if (typeof value != 'string') {\n      attrs.set(key, String(value));\n    }\n  }\n\n  return attrs;\n} // Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\n\n\nfunction parseClasses(classesSet, classesString) {\n  const classArray = classesString.split(/\\s+/);\n  classesSet.clear();\n  classArray.forEach(name => classesSet.add(name));\n} // Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\n\n\nfunction normalize(document, nodes) {\n  // Separate condition because string is iterable.\n  if (typeof nodes == 'string') {\n    return [new Text(document, nodes)];\n  }\n\n  if (!isIterable(nodes)) {\n    nodes = [nodes];\n  } // Array.from to enable .map() on non-arrays.\n\n\n  return Array.from(nodes).map(node => {\n    if (typeof node == 'string') {\n      return new Text(document, node);\n    }\n\n    if (node instanceof TextProxy) {\n      return new Text(document, node.data);\n    }\n\n    return node;\n  });\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"],"names":["Node","Text","TextProxy","toMap","isIterable","Matcher","StylesMap","Element","constructor","document","name","attrs","children","_attrs","parseAttributes","_children","_insertChild","_classes","Set","has","classString","get","parseClasses","delete","_styles","stylesProcessor","setTo","_customProperties","Map","childCount","length","isEmpty","is","type","getChild","index","getChildIndex","node","indexOf","getChildren","Symbol","iterator","getAttributeKeys","size","keys","getAttributes","entries","getAttribute","key","join","undefined","inlineStyle","toString","hasAttribute","isSimilar","otherElement","value","className","property","getStyleNames","getAsString","hasClass","getClassNames","getStyle","getNormalizedStyle","getNormalized","hasStyle","findAncestor","patterns","matcher","parent","match","getCustomProperty","getCustomProperties","getIdentity","classes","Array","from","sort","styles","attributes","map","i","_clone","deep","childrenClone","child","push","cloned","set","getFillerOffset","_appendChild","items","_fireChange","count","nodes","normalize","_remove","splice","_removeChildren","howMany","_setAttribute","String","_removeAttribute","clear","_addClass","isArray","forEach","add","_removeClass","_setStyle","_removeStyle","remove","_setCustomProperty","_removeCustomProperty","classesSet","classesString","classArray","split","data"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport StylesMap from './stylesmap';\n\n// @if CK_DEBUG_ENGINE // const { convertMapToTags } = require( '../dev-utils/utils' );\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( viewDocument, 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tnew Element( viewDocument, 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( viewDocument, 'div', mapOfAttributes ); // map\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( document, name, attrs, children ) {\n\t\tsuper( document );\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Normalized styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/view/stylesmap~StylesMap} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new StylesMap( this.document.stylesProcessor );\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tthis._styles.setTo( this._attrs.get( 'style' ) );\n\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'view:element' ); // -> true\n\t *\t\telement.is( 'view:node' ); // -> true\n\t *\n\t *\t\telement.is( 'model:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/view/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'img' ); // -> true if this is an <img> element\n\t *\t\telement.is( 'element', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type === this.name || type === 'view:' + this.name ||\n\t\t\t\ttype === 'element' || type === 'view:element' ||\n\t\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\t\ttype === 'node' || type === 'view:node';\n\t\t} else {\n\t\t\treturn name === this.name && ( type === 'element' || type === 'view:element' );\n\t\t}\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( !this._styles.isEmpty ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\tyield* this._attrs.keys();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( !this._styles.isEmpty ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tconst inlineStyle = this._styles.toString();\n\n\t\t\treturn inlineStyle == '' ? undefined : inlineStyle;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn !this._styles.isEmpty;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const property of this._styles.getStyleNames() ) {\n\t\t\tif (\n\t\t\t\t!otherElement._styles.has( property ) ||\n\t\t\t\totherElement._styles.getAsString( property ) !== this._styles.getAsString( property )\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for the given property mae.\n\t * If the style does not exist `undefined` is returned.\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#getAsString `StylesMap#getAsString()`} for details.\n\t *\n\t * For an element with style set to `'margin:1px'`:\n\t *\n\t *\t\t// Enable 'margin' shorthand processing:\n\t *\t\teditor.data.addStyleProcessorRules( addMarginRules );\n\t *\n\t *\t\tconst element = view.change( writer => {\n\t *\t\t\tconst element = writer.createElement();\n\t *\t\t\twriter.setStyle( 'margin', '1px' );\n\t *\t\t\twriter.setStyle( 'margin-bottom', '3em' );\n\t *\n\t *\t\t\treturn element;\n\t *\t\t} );\n\t *\n\t *\t\telement.getStyle( 'margin' ); // -> 'margin: 1px 1px 3em;'\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.getAsString( property );\n\t}\n\n\t/**\n\t * Returns a normalized style object or single style value.\n\t *\n\t * For an element with style set to: margin:1px 2px 3em;\n\t *\n\t *\t\telement.getNormalizedStyle( 'margin' ) );\n\t *\n\t * will return:\n\t *\n\t *\t\t{\n\t *\t\t\ttop: '1px',\n\t *\t\t\tright: '2px',\n\t *\t\t\tbottom: '3em',\n\t *\t\t\tleft: '2px'    // a normalized value from margin shorthand\n\t *\t\t}\n\t *\n\t * and reading for single style value:\n\t *\n\t *\t\tstyles.getNormalizedStyle( 'margin-left' );\n\t *\n\t * Will return a `2px` string.\n\t *\n\t * **Note**: This method will return normalized values only if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#getNormalized `StylesMap#getNormalized()`} for details.\n\t *\n\t *\n\t * @param {String} property Name of CSS property\n\t * @returns {Object|String|undefined}\n\t */\n\tgetNormalizedStyle( property ) {\n\t\treturn this._styles.getNormalized( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.getStyleNames();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * **Note**: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = this._styles.toString();\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( !styles ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\t_clone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child._clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.document, this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles.set( this._styles.getNormalized() );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( this.document, items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t\tnode.document = this.document;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#remove\n\t * @protected\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tthis._styles.setTo( value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( !this._styles.isEmpty ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.add( name ) );\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.delete( name ) );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#set `StylesMap#set()`} for details.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tthis._styles.set( property, value );\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * **Note**: This method can work with normalized style names if\n\t * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n\t * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tproperty = Array.isArray( property ) ? property : [ property ];\n\t\tproperty.forEach( name => this._styles.remove( name ) );\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n\n\t// @if CK_DEBUG_ENGINE // printTree( level = 0) {\n\t// @if CK_DEBUG_ENGINE // \tlet string = '';\n\n\t// @if CK_DEBUG_ENGINE //\tstring += '\\t'.repeat( level ) + `<${ this.name }${ convertMapToTags( this.getAttributes() ) }>`;\n\n\t// @if CK_DEBUG_ENGINE //\tfor ( const child of this.getChildren() ) {\n\t// @if CK_DEBUG_ENGINE //\t\tif ( child.is( 'text' ) ) {\n\t// @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + '\\t'.repeat( level + 1 ) + child.data;\n\t// @if CK_DEBUG_ENGINE //\t\t} else {\n\t// @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + child.printTree( level + 1 );\n\t// @if CK_DEBUG_ENGINE //\t\t}\n\t// @if CK_DEBUG_ENGINE //\t}\n\n\t// @if CK_DEBUG_ENGINE //\tif ( this.childCount ) {\n\t// @if CK_DEBUG_ENGINE //\t\tstring += '\\n' + '\\t'.repeat( level );\n\t// @if CK_DEBUG_ENGINE //\t}\n\n\t// @if CK_DEBUG_ENGINE //\tstring += `</${ this.name }>`;\n\n\t// @if CK_DEBUG_ENGINE //\treturn string;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logTree() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( this.printTree() );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Iterable`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Iterable} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tattrs = toMap( attrs );\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( document, nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( document, nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( document, node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( document, node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n"]},"metadata":{},"sourceType":"module"}