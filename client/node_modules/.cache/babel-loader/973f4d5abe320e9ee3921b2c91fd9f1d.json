{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\n/* globals console */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport verticalDotsIcon from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\nimport '../../theme/components/toolbar/toolbar.css';\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\n\nexport default class ToolbarView extends View {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n   */\n  constructor(locale, options) {\n    super(locale);\n    const bind = this.bindTemplate;\n    const t = this.t;\n    /**\n     * A reference to the options object passed to the constructor.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n     */\n\n    this.options = options || {};\n    /**\n     * Label used by assistive technologies to describe this toolbar element.\n     *\n     * @default 'Editor toolbar'\n     * @member {String} #ariaLabel\n     */\n\n    this.set('ariaLabel', t('Editor toolbar'));\n    /**\n     * The maximum width of the toolbar element.\n     *\n     * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n     * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n     * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n     *\n     * @observable\n     * @default 'auto'\n     * @member {String} #maxWidth\n     */\n\n    this.set('maxWidth', 'auto');\n    /**\n     * A collection of toolbar items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * Tracks information about the DOM focus in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n     * to handle keyboard navigation in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n    this.set('class');\n    /**\n     * When set true, makes the toolbar look compact with {@link #element}.\n     *\n     * @observable\n     * @default false\n     * @member {String} #isCompact\n     */\n\n    this.set('isCompact', false);\n    /**\n     * A (child) view containing {@link #items toolbar items}.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n\n    this.itemsView = new ItemsView(locale);\n    /**\n     * A top–level collection aggregating building blocks of the toolbar.\n     *\n     *\t┌───────────────── ToolbarView ─────────────────┐\n     *\t| ┌──────────────── #children ────────────────┐ |\n     *\t| |   ┌──────────── #itemsView ───────────┐   | |\n     *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n     *\t| |   └──────────────────────────────────-┘   | |\n     *\t| └───────────────────────────────────────────┘ |\n     *\t└───────────────────────────────────────────────┘\n     *\n     * By default, it contains the {@link #itemsView} but it can be extended with additional\n     * UI elements when necessary.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    this.children.add(this.itemsView);\n    /**\n     * A collection of {@link #items} that take part in the focus cycling\n     * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n     * some optional UI elements that also belong to the toolbar and should be focusable\n     * by the user.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.focusables = this.createCollection();\n    /**\n     * Controls the orientation of toolbar items. Only available when\n     * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n     * is **disabled**.\n     *\n     * @observable\n     * @member {Boolean} #isVertical\n     */\n\n    /**\n     * Helps cycling over {@link #focusables focusable items} in the toolbar.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this.focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate toolbar items backwards using the arrow[left,up] keys.\n        focusPrevious: ['arrowleft', 'arrowup'],\n        // Navigate toolbar items forwards using the arrow[right,down] keys.\n        focusNext: ['arrowright', 'arrowdown']\n      }\n    });\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-toolbar', bind.to('class'), bind.if('isCompact', 'ck-toolbar_compact')],\n        role: 'toolbar',\n        'aria-label': bind.to('ariaLabel'),\n        style: {\n          maxWidth: bind.to('maxWidth')\n        }\n      },\n      children: this.children,\n      on: {\n        // https://github.com/ckeditor/ckeditor5-ui/issues/206\n        mousedown: preventDefault(this)\n      }\n    });\n    /**\n     * An instance of the active toolbar behavior that shapes its look and functionality.\n     *\n     * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n     */\n\n    this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Children added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    }\n\n    this.items.on('add', (evt, item) => {\n      this.focusTracker.add(item.element);\n    });\n    this.items.on('remove', (evt, item) => {\n      this.focusTracker.remove(item.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n\n    this._behavior.render(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    this._behavior.destroy();\n\n    return super.destroy();\n  }\n  /**\n   * Focuses the first focusable in {@link #focusables}.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Focuses the last focusable in {@link #focusables}.\n   */\n\n\n  focusLast() {\n    this._focusCycler.focusLast();\n  }\n  /**\n   * A utility that expands the plain toolbar configuration into\n   * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n   *\n   * @param {Array.<String>} config The toolbar items configuration.\n   * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n   */\n\n\n  fillFromConfig(config, factory) {\n    config.map(name => {\n      if (name == '|') {\n        this.items.add(new ToolbarSeparatorView());\n      } else if (factory.has(name)) {\n        this.items.add(factory.create(name));\n      } else {\n        /**\n         * There was a problem processing the configuration of the toolbar. The item with the given\n         * name does not exist so it was omitted when rendering the toolbar.\n         *\n         * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n         * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n         *\n         * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n         * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n         *\n         * You can use the following snippet to retrieve all available toolbar items:\n         *\n         *\t\tArray.from( editor.ui.componentFactory.names() );\n         *\n         * @error toolbarview-item-unavailable\n         * @param {String} name The name of the component.\n         */\n        console.warn(attachLinkToDocumentation('toolbarview-item-unavailable: The requested toolbar item is unavailable.'), {\n          name\n        });\n      }\n    });\n  }\n\n}\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\n\nclass ItemsView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * A collection of items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-toolbar__items']\n      },\n      children: this.children\n    });\n  }\n\n}\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n\nclass StaticLayout {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n  constructor(view) {\n    const bind = view.bindTemplate; // Static toolbar can be vertical when needed.\n\n    view.set('isVertical', false); // 1:1 pass–through binding, all ToolbarView#items are visible.\n\n    view.itemsView.children.bindTo(view.items).using(item => item); // 1:1 pass–through binding, all ToolbarView#items are focusable.\n\n    view.focusables.bindTo(view.items).using(item => item);\n    view.extendTemplate({\n      attributes: {\n        class: [// When vertical, the toolbar has an additional CSS class.\n        bind.if('isVertical', 'ck-toolbar_vertical')]\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {}\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {}\n\n}\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n\nclass DynamicGrouping {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n  constructor(view) {\n    /**\n     * A collection of toolbar children.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.viewChildren = view.children;\n    /**\n     * A collection of focusable toolbar elements.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.viewFocusables = view.focusables;\n    /**\n     * A view containing toolbar items.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n\n    this.viewItemsView = view.itemsView;\n    /**\n     * Toolbar focus tracker.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.viewFocusTracker = view.focusTracker;\n    /**\n     * Toolbar locale.\n     *\n     * @readonly\n     * @member {module:utils/locale~Locale}\n     */\n\n    this.viewLocale = view.locale;\n    /**\n     * Toolbar element.\n     *\n     * @readonly\n     * @member {HTMLElement} #viewElement\n     */\n\n    /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n     * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n     * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.ungroupedItems = view.createCollection();\n    /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * A collection of the toolbar items that do not fit into a single row of the toolbar.\n     * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n     * this collection is empty.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.groupedItems = view.createCollection();\n    /**\n     * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n     * row of the toolbar. It is displayed on demand as the last of\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n     * (nested) toolbar which displays items that would normally overflow.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n    /**\n     * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n     * and manage items that do not fit into a single row.\n     *\n     * **Note:** Created in {@link #_enableGroupingOnResize}.\n     *\n     * @readonly\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n\n    this.resizeObserver = null;\n    /**\n     * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n     * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n     * a single toolbar line. This value can be reused between updates because it is unlikely that\n     * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n     *\n     * @readonly\n     * @member {Number}\n     */\n\n    this.cachedPadding = null;\n    /**\n     * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n     * and should be executed immediately the next time the toolbar shows up.\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n\n    this.shouldUpdateGroupingOnNextResize = false; // Only those items that were not grouped are visible to the user.\n\n    view.itemsView.children.bindTo(this.ungroupedItems).using(item => item); // Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n\n    this.ungroupedItems.on('add', this._updateFocusCycleableItems.bind(this));\n    this.ungroupedItems.on('remove', this._updateFocusCycleableItems.bind(this)); // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n\n    view.children.on('add', this._updateFocusCycleableItems.bind(this));\n    view.children.on('remove', this._updateFocusCycleableItems.bind(this)); // ToolbarView#items is dynamic. When an item is added, it should be automatically\n    // represented in either grouped or ungrouped items at the right index.\n    // In other words #items == concat( #ungroupedItems, #groupedItems )\n    // (in length and order).\n\n    view.items.on('add', (evt, item, index) => {\n      if (index > this.ungroupedItems.length) {\n        this.groupedItems.add(item, index - this.ungroupedItems.length);\n      } else {\n        this.ungroupedItems.add(item, index);\n      } // When a new ungrouped item joins in and lands in #ungroupedItems, there's a chance it causes\n      // the toolbar to overflow.\n\n\n      this._updateGrouping();\n    }); // When an item is removed from ToolbarView#items, it should be automatically\n    // removed from either grouped or ungrouped items.\n\n    view.items.on('remove', (evt, item, index) => {\n      if (index > this.ungroupedItems.length) {\n        this.groupedItems.remove(item);\n      } else {\n        this.ungroupedItems.remove(item);\n      } // Whether removed from grouped or ungrouped items, there is a chance\n      // some new space is available and we could do some ungrouping.\n\n\n      this._updateGrouping();\n    });\n    view.extendTemplate({\n      attributes: {\n        class: [// To group items dynamically, the toolbar needs a dedicated CSS class.\n        'ck-toolbar_grouping']\n      }\n    });\n  }\n  /**\n   * Enables dynamic items grouping based on the dimensions of the toolbar.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n\n\n  render(view) {\n    this.viewElement = view.element;\n\n    this._enableGroupingOnResize();\n\n    this._enableGroupingOnMaxWidthChange(view);\n  }\n  /**\n   * Cleans up the internals used by this behavior.\n   */\n\n\n  destroy() {\n    // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n    // so let's make sure it's actually destroyed along with the toolbar.\n    this.groupedItemsDropdown.destroy();\n    this.resizeObserver.destroy();\n  }\n  /**\n   * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n   * and it will move them to the {@link #groupedItems} when it happens.\n   *\n   * At the same time, it will also check if there is enough space in the toolbar for the first of the\n   * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n   * without the toolbar wrapping.\n   *\n   * @protected\n   */\n\n\n  _updateGrouping() {\n    // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n    // for instance before #render(), or after render but without a parent or a parent detached\n    // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n    // nothing else. This happens, for instance, when the toolbar is detached from DOM and\n    // some logic adds or removes its #items.\n    if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n      return;\n    } // Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n    // and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n    // the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n    // the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n    // time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n\n\n    if (!this.viewElement.offsetParent) {\n      this.shouldUpdateGroupingOnNextResize = true;\n      return;\n    }\n\n    let wereItemsGrouped; // Group #items as long as some wrap to the next row. This will happen, for instance,\n    // when the toolbar is getting narrow and there is not enough space to display all items in\n    // a single row.\n\n    while (this._areItemsOverflowing) {\n      this._groupLastItem();\n\n      wereItemsGrouped = true;\n    } // If none were grouped now but there were some items already grouped before,\n    // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n    // for instance, the toolbar is stretching and there's more space in it than before.\n\n\n    if (!wereItemsGrouped && this.groupedItems.length) {\n      // Ungroup items as long as none are overflowing or there are none to ungroup left.\n      while (this.groupedItems.length && !this._areItemsOverflowing) {\n        this._ungroupFirstItem();\n      } // If the ungrouping ended up with some item wrapping to the next row,\n      // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n      // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n      // clean–up is vital for the algorithm.\n\n\n      if (this._areItemsOverflowing) {\n        this._groupLastItem();\n      }\n    }\n  }\n  /**\n   * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n   * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _areItemsOverflowing() {\n    // An empty toolbar cannot overflow.\n    if (!this.ungroupedItems.length) {\n      return false;\n    }\n\n    const element = this.viewElement;\n    const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n    const lastChildRect = new Rect(element.lastChild);\n    const toolbarRect = new Rect(element);\n\n    if (!this.cachedPadding) {\n      const computedStyle = global.window.getComputedStyle(element);\n      const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft'; // parseInt() is essential because of quirky floating point numbers logic and DOM.\n      // If the padding turned out too big because of that, the grouped items dropdown would\n      // always look (from the Rect perspective) like it overflows (while it's not).\n\n      this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n    }\n\n    if (uiLanguageDirection === 'ltr') {\n      return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n    } else {\n      return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n    }\n  }\n  /**\n   * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n   * upon resize when there is little space available. Instead, the toolbar items are moved to the\n   * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n   *\n   * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n   * them in the dropdown if necessary. It will also observe the browser window for size changes in\n   * the future and respond to them by grouping more items or reverting already grouped back, depending\n   * on the visual space available.\n   *\n   * @private\n   */\n\n\n  _enableGroupingOnResize() {\n    let previousWidth; // TODO: Consider debounce.\n\n    this.resizeObserver = new ResizeObserver(this.viewElement, entry => {\n      if (!previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize) {\n        this.shouldUpdateGroupingOnNextResize = false;\n\n        this._updateGrouping();\n\n        previousWidth = entry.contentRect.width;\n      }\n    });\n\n    this._updateGrouping();\n  }\n  /**\n   * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n   * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n   *\n   * @private\n   */\n\n\n  _enableGroupingOnMaxWidthChange(view) {\n    view.on('change:maxWidth', () => {\n      this._updateGrouping();\n    });\n  }\n  /**\n   * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n   * to the {@link #groupedItems} collection.\n   *\n   * The opposite of {@link #_ungroupFirstItem}.\n   *\n   * @private\n   */\n\n\n  _groupLastItem() {\n    if (!this.groupedItems.length) {\n      this.viewChildren.add(new ToolbarSeparatorView());\n      this.viewChildren.add(this.groupedItemsDropdown);\n      this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n    }\n\n    this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n  }\n  /**\n   * Moves the very first item belonging to {@link #groupedItems} back\n   * to the {@link #ungroupedItems} collection.\n   *\n   * The opposite of {@link #_groupLastItem}.\n   *\n   * @private\n   */\n\n\n  _ungroupFirstItem() {\n    this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n\n    if (!this.groupedItems.length) {\n      this.viewChildren.remove(this.groupedItemsDropdown);\n      this.viewChildren.remove(this.viewChildren.last);\n      this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n    }\n  }\n  /**\n   * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n   * collection when there is not enough space in the toolbar to display all items in a single row.\n   *\n   * @private\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _createGroupedItemsDropdown() {\n    const locale = this.viewLocale;\n    const t = locale.t;\n    const dropdown = createDropdown(locale);\n    dropdown.class = 'ck-toolbar__grouped-dropdown'; // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n    // (https://github.com/ckeditor/ckeditor5/issues/5608)\n\n    dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n    addToolbarToDropdown(dropdown, []);\n    dropdown.buttonView.set({\n      label: t('Show more items'),\n      tooltip: true,\n      icon: verticalDotsIcon\n    }); // 1:1 pass–through binding.\n\n    dropdown.toolbarView.items.bindTo(this.groupedItems).using(item => item);\n    return dropdown;\n  }\n  /**\n   * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n   * collection so it represents the up–to–date state of the UI from the perspective of the user.\n   *\n   * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n   * it must be subject to focus cycling in the toolbar.\n   *\n   * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n   * to learn more about the purpose of this method.\n   *\n   * @private\n   */\n\n\n  _updateFocusCycleableItems() {\n    this.viewFocusables.clear();\n    this.ungroupedItems.map(item => {\n      this.viewFocusables.add(item);\n    });\n\n    if (this.groupedItems.length) {\n      this.viewFocusables.add(this.groupedItemsDropdown);\n    }\n  }\n\n}\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow.\n *\n * Also see: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"],"names":["View","FocusTracker","FocusCycler","KeystrokeHandler","ToolbarSeparatorView","ResizeObserver","preventDefault","Rect","global","createDropdown","addToolbarToDropdown","attachLinkToDocumentation","verticalDotsIcon","ToolbarView","constructor","locale","options","bind","bindTemplate","t","set","items","createCollection","focusTracker","keystrokes","itemsView","ItemsView","children","add","focusables","_focusCycler","keystrokeHandler","actions","focusPrevious","focusNext","setTemplate","tag","attributes","class","to","if","role","style","maxWidth","on","mousedown","_behavior","shouldGroupWhenFull","DynamicGrouping","StaticLayout","render","item","element","evt","remove","listenTo","destroy","focus","focusFirst","focusLast","fillFromConfig","config","factory","map","name","has","create","console","warn","view","bindTo","using","extendTemplate","viewChildren","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","resizeObserver","cachedPadding","shouldUpdateGroupingOnNextResize","_updateFocusCycleableItems","index","length","_updateGrouping","viewElement","_enableGroupingOnResize","_enableGroupingOnMaxWidthChange","ownerDocument","body","contains","offsetParent","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","uiLanguageDirection","lastChildRect","lastChild","toolbarRect","computedStyle","window","getComputedStyle","paddingProperty","Number","parseInt","right","left","previousWidth","entry","contentRect","width","last","first","dropdown","panelPosition","buttonView","label","tooltip","icon","toolbarView","clear"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\n/* globals console */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport verticalDotsIcon from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\n\nimport '../../theme/components/toolbar/toolbar.css';\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst t = this.t;\n\n\t\t/**\n\t\t * A reference to the options object passed to the constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n\t\t */\n\t\tthis.options = options || {};\n\n\t\t/**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n\t\tthis.set( 'ariaLabel', t( 'Editor toolbar' ) );\n\n\t\t/**\n\t\t * The maximum width of the toolbar element.\n\t\t *\n\t\t * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n\t\t * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {String} #maxWidth\n\t\t */\n\t\tthis.set( 'maxWidth', 'auto' );\n\n\t\t/**\n\t\t * A collection of toolbar items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * to handle keyboard navigation in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * When set true, makes the toolbar look compact with {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {String} #isCompact\n\t\t */\n\t\tthis.set( 'isCompact', false );\n\n\t\t/**\n\t\t * A (child) view containing {@link #items toolbar items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.itemsView = new ItemsView( locale );\n\n\t\t/**\n\t\t * A top–level collection aggregating building blocks of the toolbar.\n\t\t *\n\t\t *\t┌───────────────── ToolbarView ─────────────────┐\n\t\t *\t| ┌──────────────── #children ────────────────┐ |\n\t\t *\t| |   ┌──────────── #itemsView ───────────┐   | |\n\t\t *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n\t\t *\t| |   └──────────────────────────────────-┘   | |\n\t\t *\t| └───────────────────────────────────────────┘ |\n\t\t *\t└───────────────────────────────────────────────┘\n\t\t *\n\t\t * By default, it contains the {@link #itemsView} but it can be extended with additional\n\t\t * UI elements when necessary.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\t\tthis.children.add( this.itemsView );\n\n\t\t/**\n\t\t * A collection of {@link #items} that take part in the focus cycling\n\t\t * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n\t\t * some optional UI elements that also belong to the toolbar and should be focusable\n\t\t * by the user.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.focusables = this.createCollection();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items. Only available when\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n\t\t * is **disabled**.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\n\t\t/**\n\t\t * Helps cycling over {@link #focusables focusable items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isCompact', 'ck-toolbar_compact' )\n\t\t\t\t],\n\t\t\t\trole: 'toolbar',\n\t\t\t\t'aria-label': bind.to( 'ariaLabel' ),\n\t\t\t\tstyle: {\n\t\t\t\t\tmaxWidth: bind.to( 'maxWidth' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * An instance of the active toolbar behavior that shapes its look and functionality.\n\t\t *\n\t\t * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n\t\t */\n\t\tthis._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping( this ) : new StaticLayout( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Children added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tthis._behavior.render( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._behavior.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #focusables}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility that expands the plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items configuration.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n\tfillFromConfig( config, factory ) {\n\t\tconfig.map( name => {\n\t\t\tif ( name == '|' ) {\n\t\t\t\tthis.items.add( new ToolbarSeparatorView() );\n\t\t\t} else if ( factory.has( name ) ) {\n\t\t\t\tthis.items.add( factory.create( name ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n\t\t\t\tconsole.warn( attachLinkToDocumentation(\n\t\t\t\t\t'toolbarview-item-unavailable: The requested toolbar item is unavailable.' ), { name } );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * A collection of items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__items'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n}\n\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\tconst bind = view.bindTemplate;\n\n\t\t// Static toolbar can be vertical when needed.\n\t\tview.set( 'isVertical', false );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are visible.\n\t\tview.itemsView.children.bindTo( view.items ).using( item => item );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are focusable.\n\t\tview.focusables.bindTo( view.items ).using( item => item );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// When vertical, the toolbar has an additional CSS class.\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' )\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {}\n}\n\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * A collection of toolbar children.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewChildren = view.children;\n\n\t\t/**\n\t\t * A collection of focusable toolbar elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewFocusables = view.focusables;\n\n\t\t/**\n\t\t * A view containing toolbar items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.viewItemsView = view.itemsView;\n\n\t\t/**\n\t\t * Toolbar focus tracker.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.viewFocusTracker = view.focusTracker;\n\n\t\t/**\n\t\t * Toolbar locale.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.viewLocale = view.locale;\n\n\t\t/**\n\t\t * Toolbar element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #viewElement\n\t\t */\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n\t\t * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n\t\t * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.ungroupedItems = view.createCollection();\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * A collection of the toolbar items that do not fit into a single row of the toolbar.\n\t\t * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n\t\t * this collection is empty.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.groupedItems = view.createCollection();\n\n\t\t/**\n\t\t * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n\t\t * row of the toolbar. It is displayed on demand as the last of\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n\t\t * (nested) toolbar which displays items that would normally overflow.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.groupedItemsDropdown = this._createGroupedItemsDropdown();\n\n\t\t/**\n\t\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t\t * and manage items that do not fit into a single row.\n\t\t *\n\t\t * **Note:** Created in {@link #_enableGroupingOnResize}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis.resizeObserver = null;\n\n\t\t/**\n\t\t * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n\t\t * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n\t\t * a single toolbar line. This value can be reused between updates because it is unlikely that\n\t\t * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.cachedPadding = null;\n\n\t\t/**\n\t\t * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n\t\t * and should be executed immediately the next time the toolbar shows up.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t// Only those items that were not grouped are visible to the user.\n\t\tview.itemsView.children.bindTo( this.ungroupedItems ).using( item => item );\n\n\t\t// Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n\t\tthis.ungroupedItems.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tthis.ungroupedItems.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n\t\tview.children.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tview.children.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// ToolbarView#items is dynamic. When an item is added, it should be automatically\n\t\t// represented in either grouped or ungrouped items at the right index.\n\t\t// In other words #items == concat( #ungroupedItems, #groupedItems )\n\t\t// (in length and order).\n\t\tview.items.on( 'add', ( evt, item, index ) => {\n\t\t\tif ( index > this.ungroupedItems.length ) {\n\t\t\t\tthis.groupedItems.add( item, index - this.ungroupedItems.length );\n\t\t\t} else {\n\t\t\t\tthis.ungroupedItems.add( item, index );\n\t\t\t}\n\n\t\t\t// When a new ungrouped item joins in and lands in #ungroupedItems, there's a chance it causes\n\t\t\t// the toolbar to overflow.\n\t\t\tthis._updateGrouping();\n\t\t} );\n\n\t\t// When an item is removed from ToolbarView#items, it should be automatically\n\t\t// removed from either grouped or ungrouped items.\n\t\tview.items.on( 'remove', ( evt, item, index ) => {\n\t\t\tif ( index > this.ungroupedItems.length ) {\n\t\t\t\tthis.groupedItems.remove( item );\n\t\t\t} else {\n\t\t\t\tthis.ungroupedItems.remove( item );\n\t\t\t}\n\n\t\t\t// Whether removed from grouped or ungrouped items, there is a chance\n\t\t\t// some new space is available and we could do some ungrouping.\n\t\t\tthis._updateGrouping();\n\t\t} );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// To group items dynamically, the toolbar needs a dedicated CSS class.\n\t\t\t\t\t'ck-toolbar_grouping'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Enables dynamic items grouping based on the dimensions of the toolbar.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\trender( view ) {\n\t\tthis.viewElement = view.element;\n\n\t\tthis._enableGroupingOnResize();\n\t\tthis._enableGroupingOnMaxWidthChange( view );\n\t}\n\n\t/**\n\t * Cleans up the internals used by this behavior.\n\t */\n\tdestroy() {\n\t\t// The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n\t\t// so let's make sure it's actually destroyed along with the toolbar.\n\t\tthis.groupedItemsDropdown.destroy();\n\n\t\tthis.resizeObserver.destroy();\n\t}\n\n\t/**\n\t * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n\t * and it will move them to the {@link #groupedItems} when it happens.\n\t *\n\t * At the same time, it will also check if there is enough space in the toolbar for the first of the\n\t * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n\t * without the toolbar wrapping.\n\t *\n\t * @protected\n\t */\n\t_updateGrouping() {\n\t\t// Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n\t\t// for instance before #render(), or after render but without a parent or a parent detached\n\t\t// from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n\t\t// nothing else. This happens, for instance, when the toolbar is detached from DOM and\n\t\t// some logic adds or removes its #items.\n\t\tif ( !this.viewElement.ownerDocument.body.contains( this.viewElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n\t\t// and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n\t\t// the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n\t\t// the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n\t\t// time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n\t\tif ( !this.viewElement.offsetParent ) {\n\t\t\tthis.shouldUpdateGroupingOnNextResize = true;\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet wereItemsGrouped;\n\n\t\t// Group #items as long as some wrap to the next row. This will happen, for instance,\n\t\t// when the toolbar is getting narrow and there is not enough space to display all items in\n\t\t// a single row.\n\t\twhile ( this._areItemsOverflowing ) {\n\t\t\tthis._groupLastItem();\n\n\t\t\twereItemsGrouped = true;\n\t\t}\n\n\t\t// If none were grouped now but there were some items already grouped before,\n\t\t// then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n\t\t// for instance, the toolbar is stretching and there's more space in it than before.\n\t\tif ( !wereItemsGrouped && this.groupedItems.length ) {\n\t\t\t// Ungroup items as long as none are overflowing or there are none to ungroup left.\n\t\t\twhile ( this.groupedItems.length && !this._areItemsOverflowing ) {\n\t\t\t\tthis._ungroupFirstItem();\n\t\t\t}\n\n\t\t\t// If the ungrouping ended up with some item wrapping to the next row,\n\t\t\t// put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n\t\t\t// an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n\t\t\t// clean–up is vital for the algorithm.\n\t\t\tif ( this._areItemsOverflowing ) {\n\t\t\t\tthis._groupLastItem();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n\t * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _areItemsOverflowing() {\n\t\t// An empty toolbar cannot overflow.\n\t\tif ( !this.ungroupedItems.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst element = this.viewElement;\n\t\tconst uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n\t\tconst lastChildRect = new Rect( element.lastChild );\n\t\tconst toolbarRect = new Rect( element );\n\n\t\tif ( !this.cachedPadding ) {\n\t\t\tconst computedStyle = global.window.getComputedStyle( element );\n\t\t\tconst paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n\t\t\t// parseInt() is essential because of quirky floating point numbers logic and DOM.\n\t\t\t// If the padding turned out too big because of that, the grouped items dropdown would\n\t\t\t// always look (from the Rect perspective) like it overflows (while it's not).\n\t\t\tthis.cachedPadding = Number.parseInt( computedStyle[ paddingProperty ] );\n\t\t}\n\n\t\tif ( uiLanguageDirection === 'ltr' ) {\n\t\t\treturn lastChildRect.right > toolbarRect.right - this.cachedPadding;\n\t\t} else {\n\t\t\treturn lastChildRect.left < toolbarRect.left + this.cachedPadding;\n\t\t}\n\t}\n\n\t/**\n\t * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n\t * upon resize when there is little space available. Instead, the toolbar items are moved to the\n\t * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n\t *\n\t * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n\t * them in the dropdown if necessary. It will also observe the browser window for size changes in\n\t * the future and respond to them by grouping more items or reverting already grouped back, depending\n\t * on the visual space available.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnResize() {\n\t\tlet previousWidth;\n\n\t\t// TODO: Consider debounce.\n\t\tthis.resizeObserver = new ResizeObserver( this.viewElement, entry => {\n\t\t\tif ( !previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize ) {\n\t\t\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t\t\tthis._updateGrouping();\n\n\t\t\t\tpreviousWidth = entry.contentRect.width;\n\t\t\t}\n\t\t} );\n\n\t\tthis._updateGrouping();\n\t}\n\n\t/**\n\t * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n\t * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnMaxWidthChange( view ) {\n\t\tview.on( 'change:maxWidth', () => {\n\t\t\tthis._updateGrouping();\n\t\t} );\n\t}\n\n\t/**\n\t * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n\t * to the {@link #groupedItems} collection.\n\t *\n\t * The opposite of {@link #_ungroupFirstItem}.\n\t *\n\t * @private\n\t */\n\t_groupLastItem() {\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.add( new ToolbarSeparatorView() );\n\t\t\tthis.viewChildren.add( this.groupedItemsDropdown );\n\t\t\tthis.viewFocusTracker.add( this.groupedItemsDropdown.element );\n\t\t}\n\n\t\tthis.groupedItems.add( this.ungroupedItems.remove( this.ungroupedItems.last ), 0 );\n\t}\n\n\t/**\n\t * Moves the very first item belonging to {@link #groupedItems} back\n\t * to the {@link #ungroupedItems} collection.\n\t *\n\t * The opposite of {@link #_groupLastItem}.\n\t *\n\t * @private\n\t */\n\t_ungroupFirstItem() {\n\t\tthis.ungroupedItems.add( this.groupedItems.remove( this.groupedItems.first ) );\n\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.remove( this.groupedItemsDropdown );\n\t\t\tthis.viewChildren.remove( this.viewChildren.last );\n\t\t\tthis.viewFocusTracker.remove( this.groupedItemsDropdown.element );\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n\t * collection when there is not enough space in the toolbar to display all items in a single row.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createGroupedItemsDropdown() {\n\t\tconst locale = this.viewLocale;\n\t\tconst t = locale.t;\n\t\tconst dropdown = createDropdown( locale );\n\n\t\tdropdown.class = 'ck-toolbar__grouped-dropdown';\n\n\t\t// Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n\t\t// (https://github.com/ckeditor/ckeditor5/issues/5608)\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n\n\t\taddToolbarToDropdown( dropdown, [] );\n\n\t\tdropdown.buttonView.set( {\n\t\t\tlabel: t( 'Show more items' ),\n\t\t\ttooltip: true,\n\t\t\ticon: verticalDotsIcon\n\t\t} );\n\n\t\t// 1:1 pass–through binding.\n\t\tdropdown.toolbarView.items.bindTo( this.groupedItems ).using( item => item );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n\t * collection so it represents the up–to–date state of the UI from the perspective of the user.\n\t *\n\t * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n\t * it must be subject to focus cycling in the toolbar.\n\t *\n\t * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n\t * to learn more about the purpose of this method.\n\t *\n\t * @private\n\t */\n\t_updateFocusCycleableItems() {\n\t\tthis.viewFocusables.clear();\n\n\t\tthis.ungroupedItems.map( item => {\n\t\t\tthis.viewFocusables.add( item );\n\t\t} );\n\n\t\tif ( this.groupedItems.length ) {\n\t\t\tthis.viewFocusables.add( this.groupedItemsDropdown );\n\t\t}\n\t}\n}\n\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow.\n *\n * Also see: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */\n"]},"metadata":{},"sourceType":"module"}