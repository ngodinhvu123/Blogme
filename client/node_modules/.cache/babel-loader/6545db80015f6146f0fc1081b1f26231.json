{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageLoadObserver from './imageloadobserver';\nimport { viewFigureToModel, modelToViewAttributeConverter, srcsetAttributeConverter } from './converters';\nimport { toImageWidget } from './utils';\nimport ImageInsertCommand from './imageinsertcommand';\n/**\n * The image engine plugin.\n *\n * It registers:\n *\n * * `<image>` as a block element in the document schema, and allows `alt`, `src` and `srcset` attributes.\n * * converters for editing and data pipelines.\n * * `'imageInsert'` command.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const t = editor.t;\n    const conversion = editor.conversion; // See https://github.com/ckeditor/ckeditor5-image/issues/142.\n\n    editor.editing.view.addObserver(ImageLoadObserver); // Configure schema.\n\n    schema.register('image', {\n      isObject: true,\n      isBlock: true,\n      allowWhere: '$block',\n      allowAttributes: ['alt', 'src', 'srcset']\n    });\n    conversion.for('dataDowncast').elementToElement({\n      model: 'image',\n      view: (modelElement, viewWriter) => createImageViewElement(viewWriter)\n    });\n    conversion.for('editingDowncast').elementToElement({\n      model: 'image',\n      view: (modelElement, viewWriter) => toImageWidget(createImageViewElement(viewWriter), viewWriter, t('image widget'))\n    });\n    conversion.for('downcast').add(modelToViewAttributeConverter('src')).add(modelToViewAttributeConverter('alt')).add(srcsetAttributeConverter());\n    conversion.for('upcast').elementToElement({\n      view: {\n        name: 'img',\n        attributes: {\n          src: true\n        }\n      },\n      model: (viewImage, modelWriter) => modelWriter.createElement('image', {\n        src: viewImage.getAttribute('src')\n      })\n    }).attributeToAttribute({\n      view: {\n        name: 'img',\n        key: 'alt'\n      },\n      model: 'alt'\n    }).attributeToAttribute({\n      view: {\n        name: 'img',\n        key: 'srcset'\n      },\n      model: {\n        key: 'srcset',\n        value: viewImage => {\n          const value = {\n            data: viewImage.getAttribute('srcset')\n          };\n\n          if (viewImage.hasAttribute('width')) {\n            value.width = viewImage.getAttribute('width');\n          }\n\n          return value;\n        }\n      }\n    }).add(viewFigureToModel()); // Register imageUpload command.\n\n    editor.commands.add('imageInsert', new ImageInsertCommand(editor));\n  }\n\n} // Creates a view element representing the image.\n//\n//\t\t<figure class=\"image\"><img></img></figure>\n//\n// Note that `alt` and `src` attributes are converted separately, so they are not included.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/containerelement~ContainerElement}\n\nexport function createImageViewElement(writer) {\n  const emptyElement = writer.createEmptyElement('img');\n  const figure = writer.createContainerElement('figure', {\n    class: 'image'\n  });\n  writer.insert(writer.createPositionAt(figure, 0), emptyElement);\n  return figure;\n}","map":{"version":3,"sources":["D:/Tai_lieu_hoc_vu/blog_me/client/node_modules/@ckeditor/ckeditor5-image/src/image/imageediting.js"],"names":["Plugin","ImageLoadObserver","viewFigureToModel","modelToViewAttributeConverter","srcsetAttributeConverter","toImageWidget","ImageInsertCommand","ImageEditing","pluginName","init","editor","schema","model","t","conversion","editing","view","addObserver","register","isObject","isBlock","allowWhere","allowAttributes","for","elementToElement","modelElement","viewWriter","createImageViewElement","add","name","attributes","src","viewImage","modelWriter","createElement","getAttribute","attributeToAttribute","key","value","data","hasAttribute","width","commands","writer","emptyElement","createEmptyElement","figure","createContainerElement","class","insert","createPositionAt"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageLoadObserver from './imageloadobserver';\n\nimport {\n\tviewFigureToModel,\n\tmodelToViewAttributeConverter,\n\tsrcsetAttributeConverter\n} from './converters';\n\nimport { toImageWidget } from './utils';\n\nimport ImageInsertCommand from './imageinsertcommand';\n\n/**\n * The image engine plugin.\n *\n * It registers:\n *\n * * `<image>` as a block element in the document schema, and allows `alt`, `src` and `srcset` attributes.\n * * converters for editing and data pipelines.\n * * `'imageInsert'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst t = editor.t;\n\t\tconst conversion = editor.conversion;\n\n\t\t// See https://github.com/ckeditor/ckeditor5-image/issues/142.\n\t\teditor.editing.view.addObserver( ImageLoadObserver );\n\n\t\t// Configure schema.\n\t\tschema.register( 'image', {\n\t\t\tisObject: true,\n\t\t\tisBlock: true,\n\t\t\tallowWhere: '$block',\n\t\t\tallowAttributes: [ 'alt', 'src', 'srcset' ]\n\t\t} );\n\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'image',\n\t\t\tview: ( modelElement, viewWriter ) => createImageViewElement( viewWriter )\n\t\t} );\n\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'image',\n\t\t\tview: ( modelElement, viewWriter ) => toImageWidget( createImageViewElement( viewWriter ), viewWriter, t( 'image widget' ) )\n\t\t} );\n\n\t\tconversion.for( 'downcast' )\n\t\t\t.add( modelToViewAttributeConverter( 'src' ) )\n\t\t\t.add( modelToViewAttributeConverter( 'alt' ) )\n\t\t\t.add( srcsetAttributeConverter() );\n\n\t\tconversion.for( 'upcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'img',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tsrc: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: ( viewImage, modelWriter ) => modelWriter.createElement( 'image', { src: viewImage.getAttribute( 'src' ) } )\n\t\t\t} )\n\t\t\t.attributeToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'img',\n\t\t\t\t\tkey: 'alt'\n\t\t\t\t},\n\t\t\t\tmodel: 'alt'\n\t\t\t} )\n\t\t\t.attributeToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'img',\n\t\t\t\t\tkey: 'srcset'\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'srcset',\n\t\t\t\t\tvalue: viewImage => {\n\t\t\t\t\t\tconst value = {\n\t\t\t\t\t\t\tdata: viewImage.getAttribute( 'srcset' )\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif ( viewImage.hasAttribute( 'width' ) ) {\n\t\t\t\t\t\t\tvalue.width = viewImage.getAttribute( 'width' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.add( viewFigureToModel() );\n\n\t\t// Register imageUpload command.\n\t\teditor.commands.add( 'imageInsert', new ImageInsertCommand( editor ) );\n\t}\n}\n\n// Creates a view element representing the image.\n//\n//\t\t<figure class=\"image\"><img></img></figure>\n//\n// Note that `alt` and `src` attributes are converted separately, so they are not included.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/containerelement~ContainerElement}\nexport function createImageViewElement( writer ) {\n\tconst emptyElement = writer.createEmptyElement( 'img' );\n\tconst figure = writer.createContainerElement( 'figure', { class: 'image' } );\n\n\twriter.insert( writer.createPositionAt( figure, 0 ), emptyElement );\n\n\treturn figure;\n}\n"]},"metadata":{},"sourceType":"module"}